pacotes <- c("datasets","forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
pacotes <- c("datasets","forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
kingstimeseriesSMA3 <- SMA(kingstimeseries,n=3) # estimar com uma média móvel simples de ordem 3
vendas <- c(25, 35, 32, 39, 37, 40)
class(vendas) # tipo númerico não é usada em séreis temporais, é preciso ser "ts"
vendas <- ts (vendas)
vendas
vendas2 <- ts(vendas, start = 2021, frequency = 12) # definindo a frequência
vendas2
autoplot(vendas2, main = "Vendas", xlab = "Mês", ylab = "Unidades Vendidas")
# Exemplo 2
serie = ts(c(100:231), start = c(2000,1), end = c(2010,12), frequency = 12)
serie
class(serie)
autoplot(serie)
plot.ts(serie, main = "Exemplo1")
AirPassengers
plot.ts(AirPassengers, main="Exemplo2")
ts (AirPassengers, frequency = 4, start = c(1959, 2)) # frequency 4 => Quarterly Data
ts (1:10, frequency = 12, start = 1990) # freq 12 => Monthly data.
ts (AirPassengers, start=c(2009), end=c(2014), frequency=1) # Yearly Data
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3) # ignora as 3 primeiras linhas da base
pacotes <- c("datasets","forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# save(kings, file = "kings.RData")
kings # avaliando a base
kingstimeseries <- ts(kings) # salvando os dados no formato de séries temporais (ST)
kingstimeseries # visualizando a série criada
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat") # carregando a base
#save(births, file = "births.RData")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1)) # salvando o período de início, mês 01 de 1946
birthstimeseries # visualizando a base
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat") # carregando a base
#save(souvenir, file = "souvenir.RData")
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))  # salvando o período de início, mês 01 de 1987
souvenirtimeseries # visualizando a base
###############################################################################
# Para avaliar quando iniciar a série temporal
start(USAccDeaths)
end(USAccDeaths)
#Avaliar graficamente várias séries
plot.ts(USAccDeaths)
plot.ts(kingstimeseries) # possibilidade de modelo aditivo
plot.ts(birthstimeseries) # possibilidade de modelo aditivo
plot.ts(souvenirtimeseries) # não parece ter a possibilidade de modelo aditivo
# Uma alterantiva para transforamr o dados seria calcular o LOG natural
logsouvenirtimeseries <- log(souvenirtimeseries)
plot.ts(logsouvenirtimeseries) # modelo com LOG gera a possibilidade de modelo aditivo
AirPassengers
lag(AirPassengers, -1)
lag(AirPassengers, -2)
# gerando lags para a série
tsData <- ts(AirPassengers)
tsData
laggedTS <- lag(tsData, 3)
myDf <- as.data.frame(tsData)
myDf <- slide(myDf, "x", NewVar = "xLag1", slideBy = -1)  # create lag1 variable
myDf <- slide(myDf, "x", NewVar = "xLead1", slideBy = 1)  # create lead1 variable
head(myDf)
fpp2::a10 # série disponível
acf(a10) # autocorrelação
pacf(a10) # autocorrelação parcial
ggtsdisplay(a10) # avaliação em visualização única
# Ruído - série totalmente aleatória
# Característica: média e variância constante, sem tendência e sazonalidade
rb <- ts(rnorm(500))
autoplot(rb)
hist(rnorm(5000)) # expectativa e simétrica ao redor da média
hist(a10)
qqnorm(a10)
qqline(a10, col = "red")
# Formatando o gráfico
plot(USAccDeaths, xlab = 'Anos', ylab = 'Número de Mortes')
plot (USAccDeaths, type = 'o')
#Avaliando, e combinando, os gráficos em diferentes períodos
plot.ts(cbind(USAccDeaths,AirPassengers), main = 'Mortes x Transporte Aéreo', xlab = 'Anos')
plot.ts(cbind(USAccDeaths,AirPassengers), main = 'Mortes x Transporte Aéreo', xlab = 'Anos', nc=2) # lado a lado
# Agregando períodos
aggregate(USAccDeaths, nfrequency = 4, FUN = sum) # somas trimestrais
aggregate(USAccDeaths, nfreq = 1, FUN=mean) # médias anuais
plot(aggregate(USAccDeaths))
plot(aggregate(USAccDeaths, nfrequency = 4, FUN = sum))
monthplot(USAccDeaths, col.base =2, labels = month.abb)
# Visualizando uma janela temporal
janela = window(USAccDeaths, start=c(1973, 5), end = c(1975,7))
janela
diff(USAccDeaths) # diferença entre os meses
log(USAccDeaths) # logaritmo da série
a = acf(USAccDeaths, lag.max = 25)
a
p = pacf(USAccDeaths, lag.max = 25)
p
da = acf(diff(USAccDeaths), lag.max = 25) # diferença
da
dp = pacf(diff(USAccDeaths), lag.max = 25)
dp
# Avaliar a sazonalidade
plot(stl(log(USAccDeaths), "periodic"))
kingstimeseriesSMA3 <- SMA(kingstimeseries,n=3) # estimar com uma média móvel simples de ordem 3
plot.ts(kingstimeseriesSMA3)
pacotes <- c("datasets","forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
vendas <- c(25, 35, 32, 39, 37, 40)
class(vendas) # tipo númerico não é usada em séreis temporais, é preciso ser "ts"
vendas <- ts (vendas)
vendas
vendas2 <- ts(vendas, start = 2021, frequency = 12) # definindo a frequência
vendas2
autoplot(vendas2, main = "Vendas", xlab = "Mês", ylab = "Unidades Vendidas")
# Exemplo 2
serie = ts(c(100:231), start = c(2000,1), end = c(2010,12), frequency = 12)
serie
class(serie)
autoplot(serie)
plot.ts(serie, main = "Exemplo1")
AirPassengers
plot.ts(AirPassengers, main="Exemplo2")
ts (AirPassengers, frequency = 4, start = c(1959, 2)) # frequency 4 => Quarterly Data
ts (1:10, frequency = 12, start = 1990) # freq 12 => Monthly data.
ts (AirPassengers, start=c(2009), end=c(2014), frequency=1) # Yearly Data
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3) # ignora as 3 primeiras linhas da base
# save(kings, file = "kings.RData")
kings # avaliando a base
kingstimeseries <- ts(kings) # salvando os dados no formato de séries temporais (ST)
kingstimeseries # visualizando a série criada
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat") # carregando a base
#save(births, file = "births.RData")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1)) # salvando o período de início, mês 01 de 1946
birthstimeseries # visualizando a base
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat") # carregando a base
#save(souvenir, file = "souvenir.RData")
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))  # salvando o período de início, mês 01 de 1987
souvenirtimeseries # visualizando a base
###############################################################################
# Para avaliar quando iniciar a série temporal
start(USAccDeaths)
end(USAccDeaths)
#Avaliar graficamente várias séries
plot.ts(USAccDeaths)
pacotes <- c("datasets","forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
hist(rnorm(5000)) # expectativa e simétrica ao redor da média
rnorm(5000)
rnorm(5000000)
hist(rnorm(5000000))
