################################################################################
#               INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
################################################################################
#Pacotes utilizados:
pacotes <- c("plotly","tidyverse","reshape2","knitr","kableExtra",
"nlme","lmtest","fastDummies","msm","lmeInfo","jtools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
stderr_nlme <- function(model){
if(base::class(model) != "lme"){
base::message("Use a lme object model from nlme package")
stop()}
resume <- base::summary(model)
if(base::length(base::names(model$groups))==1){
m.type <- "HLM2"
} else if(base::length(base::names(model$groups))==2){
m.type <- "HLM3"
}
if(m.type == "HLM2"){
vcov_matrix <- model$apVar
logs_sd_re <- base::attr(vcov_matrix,"Pars")
if(base::length(logs_sd_re)==2){
stderr_tau00 <- msm::deltamethod(~exp(x1)^2,logs_sd_re,vcov_matrix)
stderr_sigma <- msm::deltamethod(~exp(x2)^2,logs_sd_re,vcov_matrix)
results <- base::data.frame(`RE Components`=base::c("Var(v0j)","Var(e)"),
`Variance Estimatives`= base::c(base::exp(logs_sd_re)[[1]]^2,
base::exp(logs_sd_re[[2]])^2),
`Std Err.`=base::c(stderr_tau00,
stderr_sigma),
z=base::c(base::exp(logs_sd_re)[[1]]^2/stderr_tau00,
base::exp(logs_sd_re[[2]])^2/stderr_sigma),
`p-value`=base::round(stats::pnorm(q=base::c(base::exp(logs_sd_re)[[1]]^2/stderr_tau00,
base::exp(logs_sd_re[[2]])^2/stderr_sigma),
lower.tail=F)*2,3))
return(results)
}
else{
stderr_tau00 <- msm::deltamethod(~exp(x1)^2,logs_sd_re,vcov_matrix)
stderr_tau01 <- msm::deltamethod(~exp(x2)^2,logs_sd_re,vcov_matrix)
stderr_sigma <- msm::deltamethod(~exp(x4)^2,logs_sd_re,vcov_matrix)
results <- base::data.frame(Components=base::c("Var(v0j)","Var(v1j)","Var(e)"),
Estimatives= base::c(base::exp(logs_sd_re)[[1]]^2,
base::exp(logs_sd_re[[2]])^2,
base::exp(logs_sd_re[[4]])^2),
Std_Err=base::c(stderr_tau00,
stderr_tau01,
stderr_sigma),
z=base::c(base::exp(logs_sd_re)[[1]]^2/stderr_tau00,
base::exp(logs_sd_re[[2]])^2/stderr_tau01,
base::exp(logs_sd_re[[4]])^2/stderr_sigma),
`p-value`=base::round(stats::pnorm(q=base::c(base::exp(logs_sd_re)[[1]]^2/stderr_tau00,
base::exp(logs_sd_re[[2]])^2/stderr_tau01,
base::exp(logs_sd_re[[4]])^2/stderr_sigma),
lower.tail=F)*2,3))
return(results)
}
}
if(m.type == "HLM3"){
vcov_matrix <- model$apVar
logs_sd_re <-  base::attr(vcov_matrix,"Pars")
if(base::length(logs_sd_re) == 3){
stderr_tau_r000 <- msm::deltamethod(~exp(x1)^2,logs_sd_re,vcov_matrix)
stderr_tau_u000 <- msm::deltamethod(~exp(x2)^2,logs_sd_re,vcov_matrix)
stderr_sigma <- msm::deltamethod(~exp(x3)^2,logs_sd_re,vcov_matrix)
results <- base::data.frame(Components=base::c("Var(t00k)","Var(v0jk)","Var(e)"),
Estimatives=base::c(base::exp(logs_sd_re)[[2]]^2,
base::exp(logs_sd_re)[[1]]^2,
base::exp(logs_sd_re)[[3]]^2),
Std_Err=base::c(stderr_tau_u000,
stderr_tau_r000,
stderr_sigma),
z=base::c(base::exp(logs_sd_re)[[2]]^2/stderr_tau_u000,
base::exp(logs_sd_re)[[1]]^2/stderr_tau_r000,
base::exp(logs_sd_re)[[3]]^2/stderr_sigma),
`p-value`=base::round(stats::pnorm(q=base::c(base::exp(logs_sd_re)[[2]]^2/stderr_tau_u000,
base::exp(logs_sd_re)[[1]]^2/stderr_tau_r000,
base::exp(logs_sd_re)[[3]]^2/stderr_sigma),
lower.tail=F)*2,3))
return(results)
}
else{
stderr_tau_r000 <- msm::deltamethod(~exp(x1)^2,logs_sd_re,vcov_matrix)
stderr_tau_r100 <- msm::deltamethod(~exp(x2)^2,logs_sd_re,vcov_matrix)
stderr_tau_u000 <- msm::deltamethod(~exp(x4)^2,logs_sd_re,vcov_matrix)
stderr_tau_u100 <- msm::deltamethod(~exp(x5)^2,logs_sd_re,vcov_matrix)
stderr_sigma <- msm::deltamethod(~exp(x7)^2,logs_sd_re,vcov_matrix)
results <- base::data.frame(`RE_Components`=base::c("Var(t00k)","Var(t10k)",
"Var(v0jk)","Var(v1jk)",
"Var(e)"),
`Variance Estimatives`=base::c(base::exp(logs_sd_re)[[4]]^2,
base::exp(logs_sd_re)[[5]]^2,
base::exp(logs_sd_re)[[1]]^2,
base::exp(logs_sd_re)[[2]]^2,
base::exp(logs_sd_re)[[7]]^2),
`Std Err.`=base::c(stderr_tau_u000,
stderr_tau_u100,
stderr_tau_r000,
stderr_tau_r100,
stderr_sigma),
z=base::c(base::exp(logs_sd_re)[[4]]^2/stderr_tau_u000,
base::exp(logs_sd_re)[[5]]^2/stderr_tau_u100,
base::exp(logs_sd_re)[[1]]^2/stderr_tau_r000,
base::exp(logs_sd_re)[[2]]^2/stderr_tau_r100,
base::exp(logs_sd_re)[[7]]^2/stderr_sigma),
`p-value`=base::round(stats::pnorm(q=base::c(base::exp(logs_sd_re)[[4]]^2/stderr_tau_u000,
base::exp(logs_sd_re)[[5]]^2/stderr_tau_u100,
base::exp(logs_sd_re)[[1]]^2/stderr_tau_r000,
base::exp(logs_sd_re)[[2]]^2/stderr_tau_r100,
base::exp(logs_sd_re)[[7]]^2/stderr_sigma),
lower.tail=F)*2,3))
return(results)
}
}
}
#Carregando a base de dados
load(file = "tempo_estudante_escola.RData")
#Visualização da base de dados
tempo_estudante_escola %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Estatísticas descritivas e tabelas de frequências
summary(tempo_estudante_escola)
#Estudo sobre o balanceamento dos dados em relação à quantidade de alunos
#por período analisado
tempo_estudante_escola %>%
rename(Mês = 3,
`Quantidade de Alunos` = 2) %>%
group_by(Mês) %>%
summarise(`Quantidade de Alunos` = n()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 25)
#Estudo sobre o desbalanceamento da quantidade de alunos aninhados em
#escolas
tempo_estudante_escola %>%
rename(Escola = 1,
`Quantidade de Alunos` = 2) %>%
group_by(Escola) %>%
summarise(`Quantidade de Alunos` = n()/4) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 25)
#Gráfico da evolução temporal média do desempenho escolar dos estudantes
#(ajuste linear)
ggplotly(
tempo_estudante_escola %>%
ggplot(aes(x = mes, y = desempenho, group = 1, label = estudante)) +
geom_point(color = "gold", size = 2, alpha = 0.2) +
geom_smooth(color = "#440154FF", method = "lm", se = F, size = 2) +
labs(x = "Mês",
y = "Desempenho Escolar") +
theme_bw()
)
#Kernel density estimation (KDE) - função densidade de probabilidade da
#variável dependente (desempenho), com histograma
ggplotly(
ggplot(tempo_estudante_escola, aes(x = desempenho)) +
geom_density(aes(x = desempenho),
position = "identity", color = "black", size = 1) +
geom_histogram(aes(y = ..density..), color = "white", fill = "deepskyblue",
bins = 30) +
theme_classic()
)
#Kernel density estimation (KDE) - função densidade de probabilidade da
#variável dependente (desempenho) por escola
ggplotly(
ggplot(tempo_estudante_escola, aes(x = desempenho)) +
geom_density(aes(color = escola, fill = escola),
position = "identity", alpha = 0.2) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
theme_classic()
)
#Kernel density estimation (KDE) - função densidade de probabilidade da
#variável dependente (desempenho), com histograma e por escola separadamente
#(função facet_wrap)
tempo_estudante_escola %>%
group_by(escola) %>%
mutate(linhas = 1:n()) %>%
mutate(x = unlist(density(desempenho, n = max(linhas))["x"]),
y = unlist(density(desempenho, n = max(linhas))["y"])) %>%
ggplot() +
geom_area(aes(x = x, y = y, group = escola, fill = escola), color = "black", alpha = 0.3) +
geom_histogram(aes(x = desempenho, y = ..density.., fill = escola),
color = "black", position = 'identity', alpha = 0.1) +
facet_wrap(~ escola) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()
#Exploração visual da evolução temporal do desempenho dos 50 primeiros
#estudantes da base de dados (50 estudantes em razão da visualização no gráfico)
tempo_estudante_escola %>%
filter(estudante %in% 1:50) %>%
ggplot(aes(group = estudante)) +
geom_point(aes(x = mes, y = desempenho, color = estudante), size = 3) +
geom_line(aes(x = mes, y = desempenho, color = estudante), size = 1) +
guides(color = F) +
scale_colour_viridis_d() +
labs(x = "Mês",
y = "Desempenho Escolar") +
theme_bw()
#Gráfico da evolução temporal do desempenho médio por escola (ajustes lineares)
ggplotly(
tempo_estudante_escola %>%
ggplot(aes(x = mes, y = desempenho, color = escola)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_point(size = 3, alpha = 0.2) +
guides(color = F) +
scale_colour_viridis_d() +
labs(x = "Mês",
y = "Desempenho Escolar") +
theme_bw()
)
#Estimação do modelo nulo (função lme do pacote nlme)
modelo_nulo_hlm3 <- lme(fixed = desempenho ~ 1,
random = list(escola = ~1, estudante = ~1),
data = tempo_estudante_escola,
method = "REML")
#Parâmetros do modelo
summary(modelo_nulo_hlm3)
#Erros-padrão do modelo por meio da função 'stderr_nlme' desenvolvida
stderr_nlme(modelo_nulo_hlm3)
################################################################################
#                      COMPARAÇÃO DO HLM3 NULO COM UM OLS NULO                 #
################################################################################
#Para estimarmos o modelo OLS nulo, podemos comandar o seguinte
modelo_ols_nulo <- lm(formula = desempenho ~ 1,
data = tempo_estudante_escola)
#Parâmetros do modelo OLS nulo
summary(modelo_ols_nulo)
#Para comparar os LLs dos modelos, vamos utilizar a função lrtest do pacote lmtest
lrtest(modelo_ols_nulo, modelo_nulo_hlm3)
#Comparação entre os LLs dos modelos
data.frame(OLS_Nulo = logLik(modelo_ols_nulo),
HLM3_Nulo = logLik(modelo_nulo_hlm3)) %>%
rename(`OLS Nulo` = 1,
`HLM3 Nulo` = 2) %>%
melt() %>%
ggplot(aes(x = variable, y = (abs(-value)), fill = factor(variable))) +
geom_bar(stat = "identity") +
geom_label(aes(label = (round(value,3))), hjust = 1.1, color = "white", size = 7) +
labs(title = "Comparação do LL",
y = "LogLik",
x = "Modelo Proposto") +
coord_flip() +
scale_fill_manual("Legenda:",
values = c("grey25","grey45")) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.line = element_line())
#Estimação do modelo com Tendência Linear e Interceptos e Inclinações Aleatórios
modelo_intercept_inclin_hlm3 <- lme(fixed = desempenho ~ mes,
random = list(escola = ~mes, estudante = ~mes),
data = tempo_estudante_escola,
method = "REML")
#Parâmetros do modelo
summary(modelo_intercept_inclin_hlm3)
#Erros-padrão do modelo por meio da função 'stderr_nlme' desenvolvida
stderr_nlme(modelo_intercept_inclin_hlm3)
#Função lrtest para comparar os LLs dos modelos
lrtest(modelo_nulo_hlm3, modelo_intercept_inclin_hlm3)
#Comparação entre os LLs dos modelos
data.frame(OLS_Nulo = logLik(modelo_ols_nulo),
HLM3_Nulo = logLik(modelo_nulo_hlm3),
HLM3_Inclinacoes_Aleatorios = logLik(modelo_intercept_inclin_hlm3)) %>%
rename(`OLS Nulo` = 1,
`HLM3 Nulo` = 2,
`HLM3 com Int. e Incl. Aleat.` = 3) %>%
melt() %>%
ggplot(aes(x = variable, y = (abs(-value)), fill = factor(variable))) +
geom_bar(stat = "identity") +
geom_label(aes(label = (round(value,3))), hjust = 1.1, color = "white", size = 6) +
labs(title = "Comparação do Ganho de LL",
y = "LogLik",
x = "Modelo Proposto") +
coord_flip() +
scale_fill_manual("Legenda:",
values = c("grey25","grey45","coral4")) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.line = element_line())
#Estimação do modelo com Tendência Linear, Interceptos e Inclinações Aleatórios
#e as variáveis 'ativ' de Nível 2 e 'texp' de Nível 3
modelo_completo_hlm3 <- lme(fixed = desempenho ~ mes + ativ + texp +
ativ:mes + texp:mes,
random = list(escola = ~mes, estudante = ~mes),
data = tempo_estudante_escola,
method = "REML")
#Parâmetros do modelo
summary(modelo_completo_hlm3)
#Erros-padrão do modelo por meio da função 'stderr_nlme' desenvolvida
stderr_nlme(modelo_completo_hlm3)
#Função lrtest para comparar os LLs dos modelos
lrtest(modelo_intercept_inclin_hlm3, modelo_completo_hlm3)
#Visualização do ganho de LogLik entre as estimações:
data.frame(OLS_Nulo = logLik(modelo_ols_nulo),
HLM3_Nulo = logLik(modelo_nulo_hlm3),
HLM3_Inclinacoes_Aleatorios = logLik(modelo_intercept_inclin_hlm3),
HLM3_Completo = logLik(modelo_completo_hlm3)) %>%
rename(`OLS Nulo` = 1,
`HLM3 Nulo` = 2,
`HLM3 com Int. e Incl. Aleat.` = 3,
`HLM3 Completo` = 4) %>%
melt() %>%
ggplot(aes(x = variable, y = (abs(-value)), fill = factor(variable))) +
geom_bar(stat = "identity") +
geom_label(aes(label = (round(value,3))), hjust = 1.1, color = "white", size = 6) +
labs(title = "Comparação do Ganho de LL",
y = "LogLik",
x = "Modelo Proposto") +
coord_flip() +
scale_fill_manual("Legenda:",
values = c("grey25","grey45","coral4","#440154FF")) +
theme(legend.title = element_blank(),
panel.background = element_rect("white"),
legend.position = "none",
axis.line = element_line())
