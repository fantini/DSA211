################################################################################
#               INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","knitr","kableExtra","reshape2","ggrepel",
"fastDummies","lmtest","splines","jtools","questionr","MASS",
"pscl","overdisp","magick","cowplot","beepr")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
load(file = "corruption.RData")
modelo_prova_bneg <- glm.nb(formula = violations ~ staff + post + corruption,
data = corruption,
init.theta = 0.4770222578, link=log)
summary(modelo_prova_bneg)
predict(object = modelo_prova_bneg, #linha 144 deste script
newdata = data.frame(staff = 28,
post = "no",
corruption = 1),
type = "response")
################################################################################
#               INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","knitr","kableExtra","reshape2","ggrepel",
"fastDummies","lmtest","splines","jtools","questionr","MASS",
"pscl","overdisp","magick","cowplot","beepr")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
################################################################################
#                   A DISTRIBUIÇÃO POISSON - PARTE CONCEITUAL                  #
################################################################################
#Estabelecendo uma função da distribuição Poisson com lambda = 1
poisson_lambda1 <- function(m){
lambda <- 1
(exp(-lambda) * lambda ^ m) / factorial(m)
}
#Estabelecendo uma função da distribuição Poisson com lambda = 4
poisson_lambda4 <- function(m){
lambda <- 4
(exp(-lambda) * lambda ^ m) / factorial(m)
}
#Estabelecendo uma função da distribuição Poisson com lambda = 10
poisson_lambda10 <- function(m){
lambda <- 10
(exp(-lambda) * lambda ^ m) / factorial(m)
}
#Plotagem das funções estabelecidas anteriormente
data.frame(m = 0:20) %>%
ggplot(aes(x = m)) +
stat_function(fun = poisson_lambda1, size = 1.5,
aes(color = "01")) +
stat_function(fun = poisson_lambda4, size = 1.5,
aes(color = "04")) +
stat_function(fun = poisson_lambda10, size = 1.5,
aes(color = "10")) +
scale_color_viridis_d("Valores de" ~ lambda ~ "") +
labs(y = "Probabilidades", x = "m") +
theme_bw()
load(file = "corruption.RData")
##############################################################################
#                   OBSERVAÇÃO DA BASE DE DADOS corruption                   #
##############################################################################
#Visualizando a base de dados
corruption %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 19)
glimpse(corruption) #Visualização das observações e das  especificações
#Estatísticas descritivas univariadas e tabela de frequências
summary(corruption)
#Tabela de frequências da variável dependente (função freq para gerar tabelas de
#frequência do pacote questionr)
freq(corruption$violations) %>%
kable()%>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 19)
#Histograma da variável dependente
ggplotly(
corruption %>%
ggplot(aes(x = violations,
fill = ..count..)) +
geom_histogram(bins = round(2 * nrow(corruption) ^ (1 / 3)),
color = "black") +
scale_fill_gradient("Contagem",
low = "#440154FF",
high = "#FDE725FF") +
labs(x = "Quantidade de violações de trânsito",
y = "Frequência") +
theme_bw()
)
#Diagnóstico preliminar para observação de eventual igualdade entre a média e
#a variância da variável dependente 'violations'
corruption %>%
summarise(Média = mean(violations),
Variância = var(violations)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 30)
#Comportamento das variáveis 'corruption' e 'violations' antes e depois do
#início da vigência da lei
corruption %>%
mutate(lnviolations = log(violations),
lnviolations = ifelse(lnviolations == -Inf,
yes = 0,
no = lnviolations)) %>%
ggplot(aes(x = corruption, y = lnviolations)) +
geom_point(color = "black") +
geom_smooth(aes(color = "Fitted Values"),
method = "lm",
formula = y ~ splines::bs(x),
se = FALSE, size = 2) +
geom_text_repel(aes(label = code), # pacote ggrepel
size = 2,
color = "black",
max.overlaps = 100) +
labs(y = "Violações de Trânsito em NY (logs)",
x = "Índice de Corrupção dos Países") +
scale_color_manual("Label:",
values = "gold") +
facet_wrap(~post) +
theme_bw()
################################################################################
#                        ESTIMAÇÃO DO MODELO POISSON                           #
################################################################################
#Estimação do modelo
modelo_poisson <- glm(formula = violations ~ staff + post + corruption,
data = corruption,
family = "poisson")
#Parâmetros do modelo_poisson
summary(modelo_poisson)
#Extração do valor de Log-Likelihood (LL)
logLik(modelo_poisson)
#Outra forma de visualização dos parâmetros - função summ do pacote jtools
summ(modelo_poisson, digits = 4, confint = T, ci.width = 0.95)
export_summs(modelo_poisson, scale = F, digits = 4)
#LR Test - função lrtest do pacote lmtest
#(likelihood ratio test para comparação de LL's entre modelos)
lrtest(modelo_poisson) #no caso, comparação com modelo nulo (somente com intercepto)
#Adicionando os fitted values do modelo Poisson (lambda_poisson) à base de dados:
corruption$lambda_poisson <- modelo_poisson$fitted.values
#Criando a nova variável Y*:
attach(corruption)
corruption$ystar <- (((violations - lambda_poisson) ^ 2)
- violations) / lambda_poisson
detach(corruption)
#Estimando o modelo auxiliar OLS, sem o intercepto:
modelo_auxiliar <- lm(formula = ystar ~ 0 + lambda_poisson,
data = corruption)
#Observando os parâmetros do modelo_auxiliar
summary(modelo_auxiliar)
#Uma abordagem mais direta para a detecção da superdispersão pelo Teste de
#Cameron e Trivedi (1990) é por meio da utilização do algoritmo overdisp().
#Função overdisp do pacote overdisp
overdisp(x = corruption,
dependent.position = 3,
predictor.position = 4:6)
#Apenas para fins didáticos, caso considerássemos a estimação Poisson como a
#mais adequada, qual seria a quantidade média esperada de violações de trânsito
#para um país cujo corpo diplomático fosse composto por 23 membros, considerando
#o período anterior à vigência da lei e cujo índice de corrupção seja
#igual a 0.5?
predict(object = modelo_poisson,
newdata = data.frame(staff = 23,
post = "no",
corruption = 0.5),
type = "response")
#Qual seria a quantidade média esperada de violações de trânsito para o mesmo
#país, porém agora considerando a vigência da lei?
predict(object = modelo_poisson,
newdata = data.frame(staff = 23,
post = "yes",
corruption = 0.5),
type = "response")
#Criando uma função da distribuição binomial negativa, com theta=2 e delta=2
#theta: parâmetro de forma da distribuição Poisson-Gama (binomial negativa)
#delta: parâmetro de taxa de decaimento da distribuição Poisson-Gama
bneg_theta2_delta2 <- function(m){
theta <- 2
delta <- 2
((delta ^ theta) * (m ^ (theta - 1)) * (exp(-m * delta))) / factorial(theta - 1)
}
#Criando uma função da distribuição binomial negativa, com theta=3 e delta=1
bneg_theta3_delta1 <- function(m){
theta <- 3
delta <- 1
((delta ^ theta) * (m ^ (theta - 1)) * (exp(-m * delta))) / factorial(theta - 1)
}
#Criando uma função da distribuição binomial negativa, com theta=3 e delta=0,5
bneg_theta3_delta05 <- function(m){
theta <- 3
delta <- 0.5
((delta ^ theta) * (m ^ (theta - 1)) * (exp(-m * delta))) / factorial(theta - 1)
}
#Plotagem das funções estabelecidas anteriormente
data.frame(m = 1:20) %>%
ggplot(aes(x = m)) +
stat_function(fun = bneg_theta2_delta2,
aes(color = "Theta igual a 2 e Delta igual a 2"),
size = 1.5) +
stat_function(fun = bneg_theta3_delta1,
aes(color = "Theta igual a 3 e Delta igual a 1"),
size = 1.5) +
stat_function(fun = bneg_theta3_delta05,
aes(color = "Theta igual a 3 e Delta igual a 0,5"),
size = 1.5) +
scale_color_viridis_d("Valores de " ~ theta ~ "e " ~ delta ~ "") +
labs(y = "Probabilidades", x = "m") +
theme_bw()
################################################################################
#                   ESTIMAÇÃO DO MODELO BINOMIAL NEGATIVO                      #
################################################################################
#Estimação do modelo binomial negativo pela função glm.nb do pacote MASS
#Modelo Binomial Negativo do Tipo 2 (NB2)
modelo_bneg <- glm.nb(formula = violations ~ staff + post + corruption,
data = corruption)
#Parâmetros do modelo_bneg
summary(modelo_bneg)
#Parâmetro de forma da distribuição binomial negativa
1 / modelo_bneg$theta #phi
modelo_bneg$theta
#Estatística z de Wald do parâmetro theta para verificação da
#significância estatística
modelo_bneg$theta / modelo_bneg$SE.theta  #maior que 1.96
#Extração do valor de Log-Likelihood (LL)
logLik(modelo_bneg)
#Parâmetros do modelo_bneg
summ(modelo_bneg, digits = 4, confint = T, ci.width = 0.95)
export_summs(modelo_bneg, scale = F, digits = 4)
#Comparando os modelos Poisson e Binomial Negativo
#modelo_poisson: linha 144 deste script!
export_summs(modelo_poisson, modelo_bneg, scale = F, digits = 4,
model.names = c("POISSON","BNEG"))
