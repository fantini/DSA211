##################################################################################
#                 INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","metan","correlation",
"see","ggraph","nortest","rgl","car","olsrr","jtools","ggstance",
"magick","cowplot","beepr","Rcpp")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
##################################################################################
#                 INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","metan","correlation",
"see","ggraph","nortest","rgl","car","olsrr","jtools","ggstance",
"magick","cowplot","beepr","Rcpp")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
#Listar os arquivos do nosso project
list.files()
#Carregando a base de dados
load(file = "tempodist.RData")
#Carregando a base de dados
load(file = "tempodist.RData")
load("~/DSA211/SML Análise de Regressão Simples e Múltipla IV/R/tempodist.rdata")
load("~/DSA211/SML Análise de Regressão Simples e Múltipla IV/R/tempodist.rdata")
#Listar os arquivos do nosso project
list.files()
#Carregando a base de dados
load(file = "tempodist.RData")
#################################################################################
#                 OBSERVANDO OS DADOS CARREGADOS DO DATASET tempodist           #
#################################################################################
tempodist %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Visualizando as observações e as especificações referentes às variáveis do dataset
glimpse(tempodist)
#Estatísticas univariadas
summary(tempodist)
load("salarios.RData")
#Estatísticas univariadas
summary(salarios)
##CORRELAÇÃO PERFEITA:
cor(salarios$rh1, salarios$econometria1)
salarios %>% select(2:4) %>%
correlation(method = "pearson") %>%
plot()
load("salarios.RData")
#Estatísticas univariadas
summary(salarios)
##CORRELAÇÃO PERFEITA:
cor(salarios$rh1, salarios$econometria1)
salarios %>% select(2:4) %>%
correlation(method = "pearson") %>%
plot()
modelo1 <- lm(formula = salario ~ rh1 + econometria1,
data = salarios)
summary(modelo1)
##CORRELAÇÃO BAIXA:
cor(salarios$rh3, salarios$econometria3)
salarios %>% select(2,7,8) %>%
correlation(method = "pearson") %>%
plot()
modelo3 <- lm(formula = salario ~ rh3 + econometria3,
data = salarios)
summary(modelo3)
#Diagnóstico de multicolinearidade (Variance Inflation Factor e Tolerance)
ols_vif_tol(modelo3)
##CORRELAÇÃO MUITO ALTA, PORÉM NÃO PERFEITA:
cor(salarios$rh2, salarios$econometria2)
salarios %>% select(2,5,6) %>%
correlation(method = "pearson") %>%
plot()
modelo2 <- lm(formula = salario ~ rh2 + econometria2,
data = salarios)
summary(modelo2)
ols_vif_tol(modelo2)
summary(modelo2)
ols_vif_tol(modelo2)
##################################################################################
#                 INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","ggrepel","fastDummies","knitr","kableExtra",
"splines","reshape2","PerformanceAnalytics","metan","correlation",
"see","ggraph","nortest","rgl","car","olsrr","jtools","ggstance",
"magick","cowplot","beepr","Rcpp")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
ols_vif_tol(modelo2)
load(file = "saeb_rend.RData")
#Estatísticas univariadas
summary(saeb_rend)
#Tabela de frequências absolutas das variáveis 'uf' e rede'
table(saeb_rend$uf)
table(saeb_rend$rede)
#Plotando saeb em função de rendimento, com linear fit
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb)) +
geom_point(size = 1, color = "#FDE725FF") +
geom_smooth(method = "lm",
color = "grey40", se = F) +
xlab("rendimento") +
ylab("saeb") +
theme_classic()
)
#Plotando saeb em função de rendimento, com destaque para rede escolar
ggplotly(
ggplot(saeb_rend, aes(x = rendimento, y = saeb, color = rede, shape = rede)) +
geom_point(size = 1) +
xlab("rendimento") +
ylab("saeb") +
scale_colour_viridis_d() +
theme_classic()
)
##################################################################################
#                       ESTIMAÇÃO DO MODELO DE REGRESSÃO E                       #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Estimação do modelo
modelosaeb <- lm(formula = saeb ~ rendimento,
data = saeb_rend)
summary(modelosaeb)
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(modelosaeb)
saeb_rend_dummies_uf <- dummy_columns(.data = saeb_rend,
select_columns = "uf",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
##################################################################################
#             ESTIMAÇÃO DO MODELO DE REGRESSÃO MÚLTIPLA COM DUMMIES E            #
#                       DIAGNÓSTICO DE HETEROCEDASTICIDADE                       #
##################################################################################
#Modelo considerando as UF's
modelosaeb_dummies_uf <- lm(formula = saeb ~ . -municipio -codigo -escola -rede,
data = saeb_rend_dummies_uf)
summary(modelosaeb_dummies_uf)
#Teste de Breusch-Pagan para diagnóstico de heterocedasticidade
ols_test_breusch_pagan(modelosaeb_dummies_uf)
load(file = "planosaude.RData")
##################################################################################
#              OBSERVANDO OS DADOS CARREGADOS DA BASE planosaude                 #
##################################################################################
glimpse(planosaude)
#Estatísticas univariadas
summary(planosaude)
#Categorias da variável 'plano'
levels(factor(planosaude$plano))
#Tabela de frequências absolutas da variável 'plano'
table(planosaude$plano)
chart.Correlation((planosaude[2:5]), histogram = TRUE)
planosaude_dummies <- dummy_columns(.data = planosaude,
select_columns = "plano",
remove_selected_columns = T,
remove_most_frequent_dummy = T)
#Visualizando a base de dados dummizada
planosaude_dummies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 19)
##################################################################################
#                       ESTIMAÇÃO DA REGRESSÃO LINEAR MÚLTIPLA                   #
##################################################################################
#Modelagem com todas as variáveis
modelo_planosaude <- lm(despmed ~ . - id, planosaude_dummies)
#Parâmetros do modelo_planosaude
summary(modelo_planosaude)
step_planosaude <- step(modelo_planosaude, k = 3.841459)
summary(step_planosaude)
#Teste de Shapiro-Francia
sf.test(step_planosaude$residuals) #função sf.test do pacote nortest
