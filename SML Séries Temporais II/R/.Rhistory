pacotes <- c("dplyr", "datasets","prophet", "forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
autoplot(a10)
a10.diff <- diff(a10, 1)
autoplot(a10.diff) # Removeu a tendência
a10.diff2 <- diff(a10, 2)
autoplot(a10.diff2)
ndiffs(a10) # avaliar a quantidade de diferenciações necessárias
lambda <- BoxCox.lambda(a10)
a10.bc <- BoxCox(a10, lambda = lambda)
hist(a10) # antes
hist(a10.bc) # atual
autoplot(a10.bc)
pacotes <- c("dplyr", "datasets","prophet", "forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
autoplot(a10)
a10.diff <- diff(a10, 1)
autoplot(a10.diff) # Removeu a tendência
help diff
diff help()
help("diff")
help("a10")
autoplot(a10)
a10.diff2 <- diff(a10, 2)
autoplot(a10.diff2)
autoplot(a10.diff) # Removeu a tendência
a10.diff2 <- diff(a10, 2)
autoplot(a10.diff2)
ndiffs(a10) # avaliar a quantidade de diferenciações necessárias
lambda <- BoxCox.lambda(a10)
a10.bc <- BoxCox(a10, lambda = lambda)
hist(a10) # antes
hist(a10.bc) # atual
autoplot(a10.bc)
ap1 <- autoplot(a10)
ap2 <- autoplot(a10.bc)
ap1 + ap2
ap1 / ap2
serie.final <- diff(a10.bc, 1)
autoplot(serie.final)
pacotes <- c("dplyr", "datasets","prophet", "forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
pacotes <- c("dplyr", "datasets","prophet", "forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
autoplot(a10)
a10.diff <- diff(a10, 1)
autoplot(a10.diff) # Removeu a tendência
a10.diff2 <- diff(a10, 2)
autoplot(a10.diff2)
ndiffs(a10) # avaliar a quantidade de diferenciações necessárias
lambda <- BoxCox.lambda(a10)
a10.bc <- BoxCox(a10, lambda = lambda)
hist(a10) # antes
hist(a10.bc) # atual
autoplot(a10.bc)
ap1 <- autoplot(a10)
ap2 <- autoplot(a10.bc)
ap1 + ap2
ap1 / ap2
serie.final <- diff(a10.bc, 1)
autoplot(serie.final)
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rainseries <- ts(rain,start=c(1813))
plot.ts(rainseries)
# Vamos usar a função HoltWinters() para isso é preciso definir os parâmetros beta e gamma.
rainseriesforecasts <- HoltWinters(rainseries, beta=FALSE, gamma=FALSE)
rainseriesforecasts
rainseriesforecasts$fitted # avaliandos os valores estimados
plot(rainseriesforecasts)
rainseriesforecasts$SSE # o valor do erro da soma dos quadrados
HoltWinters(rainseries, beta=FALSE, gamma=FALSE, l.start=23.56) # utilizando o primeiro valor previsto
# Vamos prever um período além da série original
rainseriesforecasts2 <- forecast(rainseriesforecasts, h=8)
rainseriesforecasts2
plot(rainseriesforecasts2) # plotando o gráfico para verificar a previsão
# Para avaliar usaremos o correlograma.
rainseriesforecasts2$residuals
acf(rainseriesforecasts2$residuals, lag.max = 20, na.action = na.pass)
# Vamos avaliar a significância por meio do teste Ljung-Box
Box.test(rainseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(rainseriesforecasts2$residuals)
# Para avaliar vamos gerar um histograma
plotForecastErrors <- function(forecastErrors)
{
forecastErrorsSd <- sd(x = forecastErrors,
na.rm = TRUE)
forecastErrorsMin <- min(forecastErrors,
na.rm = TRUE) - forecastErrorsSd * 5
forecastErrorsMax <- max(forecastErrors,
na.rm = TRUE) + forecastErrorsSd * 3
forecastErrorsNorm <- rnorm(n = 10000,
mean = 0,
sd = forecastErrorsSd)
binMin <- min(forecastErrorsMin, forecastErrorsNorm)
binMax <- max(forecastErrorsMax, forecastErrorsNorm)
binBreaks <- IQR(x = forecastErrors,
na.rm = TRUE) / 4
bins <- seq(from = binMin,
to = binMax,
by = binBreaks)
hist(x = forecastErrors,
col = "#DCE319FF",
freq = FALSE,
breaks = bins)
with(data = hist(x = forecastErrorsNorm,
plot = FALSE,
breaks = bins),
expr = lines(x = mids,
y = density,
col = "#440154FF",
lwd = 3))
}
# plotando o histograma dos erros de previsão
plotForecastErrors(rainseriesforecasts2$residuals)
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts,start=c(1866))
plot.ts(skirtsseries)
# É preciso configurar os parâmetros gama
skirtsseriesforecasts <- HoltWinters(skirtsseries, gamma=FALSE)
skirtsseriesforecasts
skirtsseriesforecasts$SSE
plot(skirtsseriesforecasts) # atenção para lag antes dos dados observados na previsão.
skirtsseries
# para corrigir o nível do valor inicial, e a diferença entre a segunda e a primeira observação
HoltWinters(skirtsseries, gamma=FALSE, l.start=608, b.start=9)
# Prevendo 19 pontos a mais que a série temporal
skirtsseriesforecasts2 <- forecast(skirtsseriesforecasts, h=19)
# linha azul representa com intervalos de predição de 80% com uma área sombreada em azul escuro e os
# intervalos de predição de 95% com a área na cor clara
plot(skirtsseriesforecasts2)
acf(skirtsseriesforecasts2$residuals, lag.max=20, na.action = na.pass)
Box.test(skirtsseriesforecasts2$residuals, lag=20, type="Ljung-Box")
acf(skirtsseriesforecasts2$residuals, lag.max=20, na.action = na.pass)
Box.test(skirtsseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(skirtsseriesforecasts2$residuals) # gerando um time plot
plotForecastErrors(skirtsseriesforecasts2$residuals) # gerando um histograma
plotForecastErrors(skirtsseriesforecasts2$residuals) # gerando um histograma
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat") # carregando a base (caso não esteja carregada)
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))  # salvando o período de início, mês 01 de 1987
logsouvenirtimeseries <- log(souvenirtimeseries)
souvenirtimeseriesforecasts <- HoltWinters(logsouvenirtimeseries)
souvenirtimeseriesforecasts
plot(souvenirtimeseriesforecasts)
souvenirtimeseriesforecasts2 <- forecast(souvenirtimeseriesforecasts, h=48)
plot(souvenirtimeseriesforecasts2)
acf(souvenirtimeseriesforecasts2$residuals, lag.max=20, na.action = na.pass)
Box.test(souvenirtimeseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(souvenirtimeseriesforecasts2$residuals)            # gerando um time plot
plotForecastErrors(souvenirtimeseriesforecasts2$residuals)  # gerando um histograma
## Método da média
fpp2::a10 # série disponível
## Método da média
fpp2::a10 # série disponível
prev.media <- meanf(a10, h = 12)
autoplot(prev.media)
## Método naive
prev.naive <- naive(a10, h = 12) # valores para os período seguintes
autoplot(prev.naive) # repete o último valor
## Método naive sazonal, limitação da avaliação pela sazonalidade
prev.snaive <- snaive(a10, h = 12)
autoplot(prev.snaive)
pacotes <- c("dplyr", "datasets","prophet", "forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts,start=c(1866))
plot.ts(skirtsseries)
skirtsseriesdiff1 <- diff(skirtsseries, differences=1)
plot.ts(skirtsseriesdiff1)
skirtsseriesdiff2 <- diff(skirtsseries, differences=2)
plot.ts(skirtsseriesdiff2)
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3) # ignora as 3 primeiras linhas da base
kings # avaliando a base
kingstimeseries <- ts(kings) # salvando os dados no formato de séries temporais (ST)
plot.ts(kingstimeseries)
kingtimeseriesdiff1 <- diff(kingstimeseries, differences=1) # aplicando a primeira diferença
plot.ts(kingtimeseriesdiff1)
acf(kingtimeseriesdiff1, lag.max=20)             # plotando um correlograma
acf(kingtimeseriesdiff1, lag.max=20, plot=FALSE) # captando os valores da autocorrelação
pacf(kingtimeseriesdiff1, lag.max=20)             # plotando um correlograma
pacf(kingtimeseriesdiff1, lag.max=20, plot=FALSE) # captando os valores da autocorrelação parcial
# Carregando a base Volcanodust - poeira vulcânica entre 1500 e 1969
# Fonte: Hipel and Mcleod, 1994
volcanodust <- scan("http://robjhyndman.com/tsdldata/annual/dvi.dat", skip=1)
volcanodustseries <- ts(volcanodust,start=c(1500))
plot.ts(volcanodustseries)
autoplot(a10)
a10.diff <- diff(a10, 1)
autoplot(a10.diff) # Removeu a tendência
a10.diff2 <- diff(a10, 2)
autoplot(a10.diff2)
ndiffs(a10) # avaliar a quantidade de diferenciações necessárias
lambda <- BoxCox.lambda(a10)
a10.bc <- BoxCox(a10, lambda = lambda)
hist(a10) # antes
hist(a10.bc) # atual
autoplot(a10.bc)
ap1 <- autoplot(a10)
ap2 <- autoplot(a10.bc)
ap1 + ap2
ap1 / ap2
serie.final <- diff(a10.bc, 1)
autoplot(serie.final)
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rainseries <- ts(rain,start=c(1813))
plot.ts(rainseries)
# Vamos usar a função HoltWinters() para isso é preciso definir os parâmetros beta e gamma.
rainseriesforecasts <- HoltWinters(rainseries, beta=FALSE, gamma=FALSE)
rainseriesforecasts
rainseriesforecasts$fitted # avaliandos os valores estimados
plot(rainseriesforecasts)
rainseriesforecasts$SSE # o valor do erro da soma dos quadrados
HoltWinters(rainseries, beta=FALSE, gamma=FALSE, l.start=23.56) # utilizando o primeiro valor previsto
# Vamos prever um período além da série original
rainseriesforecasts2 <- forecast(rainseriesforecasts, h=8)
rainseriesforecasts2
plot(rainseriesforecasts2) # plotando o gráfico para verificar a previsão
# Para avaliar usaremos o correlograma.
rainseriesforecasts2$residuals
acf(rainseriesforecasts2$residuals, lag.max = 20, na.action = na.pass)
# Vamos avaliar a significância por meio do teste Ljung-Box
Box.test(rainseriesforecasts2$residuals, lag=20, type="Ljung-Box")
plot.ts(rainseriesforecasts2$residuals)
# Para avaliar vamos gerar um histograma
plotForecastErrors <- function(forecastErrors)
{
forecastErrorsSd <- sd(x = forecastErrors,
na.rm = TRUE)
forecastErrorsMin <- min(forecastErrors,
na.rm = TRUE) - forecastErrorsSd * 5
forecastErrorsMax <- max(forecastErrors,
na.rm = TRUE) + forecastErrorsSd * 3
forecastErrorsNorm <- rnorm(n = 10000,
mean = 0,
sd = forecastErrorsSd)
binMin <- min(forecastErrorsMin, forecastErrorsNorm)
binMax <- max(forecastErrorsMax, forecastErrorsNorm)
binBreaks <- IQR(x = forecastErrors,
na.rm = TRUE) / 4
bins <- seq(from = binMin,
to = binMax,
by = binBreaks)
hist(x = forecastErrors,
col = "#DCE319FF",
freq = FALSE,
breaks = bins)
with(data = hist(x = forecastErrorsNorm,
plot = FALSE,
breaks = bins),
expr = lines(x = mids,
y = density,
col = "#440154FF",
lwd = 3))
}
# plotando o histograma dos erros de previsão
plotForecastErrors(rainseriesforecasts2$residuals)
# Carregando a base Volcanodust - poeira vulcânica entre 1500 e 1969
# Fonte: Hipel and Mcleod, 1994
volcanodust <- scan("http://robjhyndman.com/tsdldata/annual/dvi.dat", skip=1)
volcanodustseries <- ts(volcanodust,start=c(1500))
plot.ts(volcanodustseries)
acf(volcanodustseries, lag.max=20)             # plotando um correlograma
acf(volcanodustseries, lag.max=20, plot=FALSE) # captando os valores da autocorrelação
acf(kingtimeseriesdiff1, lag.max=20)             # plotando um correlograma
acf(kingtimeseriesdiff1, lag.max=20, plot=FALSE) # captando os valores da autocorrelação
pacf(kingtimeseriesdiff1, lag.max=20)             # plotando um correlograma
pacf(kingtimeseriesdiff1, lag.max=20, plot=FALSE) # captando os valores da autocorrelação parcial
# Carregando a base Volcanodust - poeira vulcânica entre 1500 e 1969
# Fonte: Hipel and Mcleod, 1994
volcanodust <- scan("http://robjhyndman.com/tsdldata/annual/dvi.dat", skip=1)
volcanodustseries <- ts(volcanodust,start=c(1500))
plot.ts(volcanodustseries)
acf(volcanodustseries, lag.max=20)             # plotando um correlograma
acf(volcanodustseries, lag.max=20, plot=FALSE) # captando os valores da autocorrelação
pacf(volcanodustseries, lag.max=20)
pacf(volcanodustseries, lag.max=20, plot=FALSE)
volcanodustseriesarima <- arima(volcanodustseries, order=c(2,0,0))
volcanodustseriesarima
volcanodustseriesforecasts <- forecast(volcanodustseriesarima, h=31)
volcanodustseriesforecasts
plot(volcanodustseriesforecasts) # visualização da série
acf(volcanodustseriesforecasts$residuals, lag.max=20)
Box.test(volcanodustseriesforecasts$residuals, lag=20, type="Ljung-Box")
plot.ts(volcanodustseriesforecasts$residuals)            # gráfico de tempos de erro de previsão
plotForecastErrors(volcanodustseriesforecasts$residuals)
# Com a análise feita vamos propor um modelo (0,1,1)
kingstimeseriesarima <- arima(kingstimeseries, order=c(0,1,1)) # fit an ARIMA(0,1,1) model
kingstimeseriesarima
# Vamos agora prever as idades de morte dos próximos dez reis ingleses
kingstimeseriesforecasts <- forecast(kingstimeseriesarima, h=5)
kingstimeseriesforecasts
kingstimeseries # para verificar a idade da última observação
plot(kingstimeseriesforecasts)
acf(kingstimeseriesforecasts$residuals, lag.max=20) # avaliando o correlograma
Box.test(kingstimeseriesforecasts$residuals, lag=20, type="Ljung-Box") # teste de Ljung-Box
plot.ts(kingstimeseriesforecasts$residuals) # avaliação dos resíduos
plotForecastErrors(kingstimeseriesforecasts$residuals)
# Passo 1
autoplot(a10)
dec <- decompose(a10)
autoplot(dec)
# Passo 2 Uma diferenciação e transformação de BoxCox
autoplot(serie.final) # d = 1 e BC
# Passo 3
pacf(serie.final)  #p=1 e 1, função de autocorrelação parcial
# p = autoregressivo, valores anteriores
acf(serie.final)  #q=1 e 1, função de autocorrelação
ndiffs(a10) # para avaliar as diferenciações
nsdiffs(a10) # para avaliar diferenças sazonais
# Passo 4
mod.arima <- Arima(a10, order = c(1, 1, 1), seasonal = c(1, 1, 1), lambda = lambda)
