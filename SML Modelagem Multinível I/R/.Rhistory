################################################################################
#               INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","reshape2","knitr","kableExtra","rgl","car",
"nlme","lmtest","fastDummies","msm","lmeInfo","jtools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
################################################################################
#               INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS               #
################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","reshape2","knitr","kableExtra","rgl","car",
"nlme","lmtest","fastDummies","msm","lmeInfo","jtools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
stderr_nlme <- function(model){
if(base::class(model) != "lme"){
base::message("Use a lme object model from nlme package")
stop()}
resume <- base::summary(model)
if(base::length(base::names(model$groups))==1){
m.type <- "HLM2"
} else if(base::length(base::names(model$groups))==2){
m.type <- "HLM3"
}
if(m.type == "HLM2"){
vcov_matrix <- model$apVar
logs_sd_re <- base::attr(vcov_matrix,"Pars")
if(base::length(logs_sd_re)==2){
stderr_tau00 <- msm::deltamethod(~exp(x1)^2,logs_sd_re,vcov_matrix)
stderr_sigma <- msm::deltamethod(~exp(x2)^2,logs_sd_re,vcov_matrix)
results <- base::data.frame(`RE Components`=base::c("Var(v0j)","Var(e)"),
`Variance Estimatives`= base::c(base::exp(logs_sd_re)[[1]]^2,
base::exp(logs_sd_re[[2]])^2),
`Std Err.`=base::c(stderr_tau00,
stderr_sigma),
z=base::c(base::exp(logs_sd_re)[[1]]^2/stderr_tau00,
base::exp(logs_sd_re[[2]])^2/stderr_sigma),
`p-value`=base::round(stats::pnorm(q=base::c(base::exp(logs_sd_re)[[1]]^2/stderr_tau00,
base::exp(logs_sd_re[[2]])^2/stderr_sigma),
lower.tail=F)*2,3))
return(results)
}
else{
stderr_tau00 <- msm::deltamethod(~exp(x1)^2,logs_sd_re,vcov_matrix)
stderr_tau01 <- msm::deltamethod(~exp(x2)^2,logs_sd_re,vcov_matrix)
stderr_sigma <- msm::deltamethod(~exp(x4)^2,logs_sd_re,vcov_matrix)
results <- base::data.frame(Components=base::c("Var(v0j)","Var(v1j)","Var(e)"),
Estimatives= base::c(base::exp(logs_sd_re)[[1]]^2,
base::exp(logs_sd_re[[2]])^2,
base::exp(logs_sd_re[[4]])^2),
Std_Err=base::c(stderr_tau00,
stderr_tau01,
stderr_sigma),
z=base::c(base::exp(logs_sd_re)[[1]]^2/stderr_tau00,
base::exp(logs_sd_re[[2]])^2/stderr_tau01,
base::exp(logs_sd_re[[4]])^2/stderr_sigma),
`p-value`=base::round(stats::pnorm(q=base::c(base::exp(logs_sd_re)[[1]]^2/stderr_tau00,
base::exp(logs_sd_re[[2]])^2/stderr_tau01,
base::exp(logs_sd_re[[4]])^2/stderr_sigma),
lower.tail=F)*2,3))
return(results)
}
}
if(m.type == "HLM3"){
vcov_matrix <- model$apVar
logs_sd_re <-  base::attr(vcov_matrix,"Pars")
if(base::length(logs_sd_re) == 3){
stderr_tau_r000 <- msm::deltamethod(~exp(x1)^2,logs_sd_re,vcov_matrix)
stderr_tau_u000 <- msm::deltamethod(~exp(x2)^2,logs_sd_re,vcov_matrix)
stderr_sigma <- msm::deltamethod(~exp(x3)^2,logs_sd_re,vcov_matrix)
results <- base::data.frame(Components=base::c("Var(t00k)","Var(v0jk)","Var(e)"),
Estimatives=base::c(base::exp(logs_sd_re)[[2]]^2,
base::exp(logs_sd_re)[[1]]^2,
base::exp(logs_sd_re)[[3]]^2),
Std_Err=base::c(stderr_tau_u000,
stderr_tau_r000,
stderr_sigma),
z=base::c(base::exp(logs_sd_re)[[2]]^2/stderr_tau_u000,
base::exp(logs_sd_re)[[1]]^2/stderr_tau_r000,
base::exp(logs_sd_re)[[3]]^2/stderr_sigma),
`p-value`=base::round(stats::pnorm(q=base::c(base::exp(logs_sd_re)[[2]]^2/stderr_tau_u000,
base::exp(logs_sd_re)[[1]]^2/stderr_tau_r000,
base::exp(logs_sd_re)[[3]]^2/stderr_sigma),
lower.tail=F)*2,3))
return(results)
}
else{
stderr_tau_r000 <- msm::deltamethod(~exp(x1)^2,logs_sd_re,vcov_matrix)
stderr_tau_r100 <- msm::deltamethod(~exp(x2)^2,logs_sd_re,vcov_matrix)
stderr_tau_u000 <- msm::deltamethod(~exp(x4)^2,logs_sd_re,vcov_matrix)
stderr_tau_u100 <- msm::deltamethod(~exp(x5)^2,logs_sd_re,vcov_matrix)
stderr_sigma <- msm::deltamethod(~exp(x7)^2,logs_sd_re,vcov_matrix)
results <- base::data.frame(`RE_Components`=base::c("Var(t00k)","Var(t10k)",
"Var(v0jk)","Var(v1jk)",
"Var(e)"),
`Variance Estimatives`=base::c(base::exp(logs_sd_re)[[4]]^2,
base::exp(logs_sd_re)[[5]]^2,
base::exp(logs_sd_re)[[1]]^2,
base::exp(logs_sd_re)[[2]]^2,
base::exp(logs_sd_re)[[7]]^2),
`Std Err.`=base::c(stderr_tau_u000,
stderr_tau_u100,
stderr_tau_r000,
stderr_tau_r100,
stderr_sigma),
z=base::c(base::exp(logs_sd_re)[[4]]^2/stderr_tau_u000,
base::exp(logs_sd_re)[[5]]^2/stderr_tau_u100,
base::exp(logs_sd_re)[[1]]^2/stderr_tau_r000,
base::exp(logs_sd_re)[[2]]^2/stderr_tau_r100,
base::exp(logs_sd_re)[[7]]^2/stderr_sigma),
`p-value`=base::round(stats::pnorm(q=base::c(base::exp(logs_sd_re)[[4]]^2/stderr_tau_u000,
base::exp(logs_sd_re)[[5]]^2/stderr_tau_u100,
base::exp(logs_sd_re)[[1]]^2/stderr_tau_r000,
base::exp(logs_sd_re)[[2]]^2/stderr_tau_r100,
base::exp(logs_sd_re)[[7]]^2/stderr_sigma),
lower.tail=F)*2,3))
return(results)
}
}
}
#Carregamento da base de dados
load(file = "estudante_escola.RData")
#Visualização da base de dados
estudante_escola %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 25)
#Estatísticas descritivas
summary(estudante_escola)
#Estudo sobre o desbalanceamento dos dados
estudante_escola %>%
group_by(escola) %>%
summarise(quantidade = n()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 25)
#Desempenho médio dos estudantes por escola
estudante_escola %>%
group_by(escola) %>%
summarise(`desempenho médio` = mean(desempenho, na.rm = T)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 25)
#Exploração visual do desempenho médio
estudante_escola %>%
group_by(escola) %>%
mutate(desempenho_medio = mean(desempenho, na.rm = TRUE)) %>%
ggplot() +
geom_point(aes(x = escola, y = desempenho),color = "orange", alpha = 0.5, size = 2) +
geom_line(aes(x = escola, y = desempenho_medio,
group = 1, color = "Desempenho Escolar Médio"), size = 1.5) +
scale_colour_viridis_d() +
labs(x = "Escola",
y = "Desempenho Escolar") +
theme(legend.title = element_blank(),
panel.border = element_rect(NA),
panel.grid = element_line("grey"),
panel.background = element_rect("white"),
legend.position = "bottom",
axis.text.x = element_text(angle = 90))
#Exploração visual do desempenho médio
estudante_escola %>%
group_by(escola) %>%
mutate(desempenho_medio = mean(desempenho, na.rm = TRUE)) %>%
ggplot() +
geom_point(aes(x = escola, y = desempenho),color = "orange", alpha = 0.5, size = 4) +
geom_line(aes(x = escola, y = desempenho_medio,
group = 1, color = "Desempenho Escolar Médio"), size = 1.5) +
scale_colour_viridis_d() +
labs(x = "Escola",
y = "Desempenho Escolar") +
theme(legend.title = element_blank(),
panel.border = element_rect(NA),
panel.grid = element_line("grey"),
panel.background = element_rect("white"),
legend.position = "bottom",
axis.text.x = element_text(angle = 90))
#Kernel density estimation (KDE) - função densidade de probabilidade da
#variável dependente (desempenho), com histograma
ggplotly(
ggplot(estudante_escola, aes(x = desempenho)) +
geom_density(aes(x = desempenho),
position = "identity", color = "black", size = 1) +
geom_histogram(aes(y = ..density..), color = "white", fill = "deepskyblue",
bins = 30) +
theme_classic()
)
#Kernel density estimation (KDE) - função densidade de probabilidade da
#variável dependente (desempenho) por escola
ggplotly(
ggplot(estudante_escola, aes(x = desempenho)) +
geom_density(aes(color = escola, fill = escola),
position = "identity", alpha = 0.3) +
scale_color_viridis_d() +
scale_fill_viridis_d() +
theme_classic()
)
#Kernel density estimation (KDE) - função densidade de probabilidade da
#variável dependente (desempenho), com histograma e por escola separadamente
#(função facet_wrap)
estudante_escola %>%
group_by(escola) %>%
mutate(linhas = 1:n()) %>%
mutate(x = unlist(density(desempenho, n = max(linhas))["x"]),
y = unlist(density(desempenho, n = max(linhas))["y"])) %>%
ggplot() +
geom_area(aes(x = x, y = y, group = escola, fill = escola), color = "black", alpha = 0.3) +
geom_histogram(aes(x = desempenho, y = ..density.., fill = escola),
color = "black", position = 'identity', alpha = 0.1) +
facet_wrap(~ escola) +
scale_fill_viridis_d() +
scale_color_viridis_d() +
theme_bw()
#Gráfico de desempenho x horas (OLS)
ggplotly(
estudante_escola %>%
ggplot(aes(x = horas, y = desempenho)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_point() +
scale_colour_viridis_d() +
labs(x = "Quantidade Semanal de Horas de Estudo do Aluno",
y = "Desempenho Escolar") +
theme_bw()
)
#Gráfico de desempenho x horas por escola (visualização do contexto)
#NOTE QUE A PERSPECTIVA MULTINÍVEL NATURALMENTE CONSIDERA O COMPORTAMENTO
#HETEROCEDÁSTICO NOS DADOS!
ggplotly(
estudante_escola %>%
ggplot(aes(x = horas, y = desempenho, color = escola)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_point() +
guides(color = F) +
scale_colour_viridis_d() +
labs(x = "Quantidade Semanal de Horas de Estudo do Aluno",
y = "Desempenho Escolar") +
theme_bw()
)
#O gráfico a seguir apresenta uma plotagem sob a perspectiva de um modelo
#com equação única (ex.: OLS)
base_exemplo <- estudante_escola %>%
filter(escola %in% c("1","2","3","4","5","6")) %>%
mutate(escola = as.numeric(escola))
scatter3d(desempenho ~ horas + escola, #função scatter3d do pacote car
data = base_exemplo,
fit = "linear")
#Agora plotamos o mesmo gráfico, porém de forma tridimensional,
#considerando modelos distintos para as diferentes escolas. Plotamos
#apenas as 06 primeiras escolas em razão de uma limitação do algoritmo
scatter3d(desempenho ~ horas + escola,
groups = factor(base_exemplo$escola),
data = base_exemplo,
fit = "linear",
surface = T)
#Estimação do modelo nulo (função lme do pacote nlme)
modelo_nulo_hlm2 <- lme(fixed = desempenho ~ 1,
random = ~ 1 | escola,
data = estudante_escola,
method = "REML")
#Parâmetros do modelo
summary(modelo_nulo_hlm2)
#Verificando a funcionalidade da função 'stderr_nlme' desenvolvida
stderr_nlme(modelo_nulo_hlm2)
