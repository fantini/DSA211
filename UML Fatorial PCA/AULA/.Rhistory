font_size = 12)
# Visualizando as cargas fatoriais
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
ggplot(aes(x = X1, y = X2)) +
geom_point(color = "dodgerblue4") +
geom_hline(yintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_vline(xintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_text_repel(label = row.names(cargas_fatoriais)) +
labs(x = paste("F1", paste0("(",
round(summary(afpc)$importance[2,1] * 100,
digits = 2),
"%)")),
y = paste("F2", paste0("(",
round(summary(afpc)$importance[2,2] * 100,
digits = 2),
"%)"))) +
theme_bw()
# Visualizando as cargas fatoriais
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Visualizando as Comunalidades
data.frame(rowSums(cargas_fatoriais ^ 2)) %>%
rename(comunalidades = 1) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# RelatÃ³rio das cargas fatoriais e das comunalidades
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
mutate(Comunalidades = rowSums(cargas_fatoriais ^ 2)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
ggplot(aes(x = X1, y = X2)) +
geom_point(color = "dodgerblue4") +
geom_hline(yintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_vline(xintercept = 0, color = "darkgoldenrod3", linetype = "dashed") +
geom_text_repel(label = row.names(cargas_fatoriais)) +
labs(x = paste("F1", paste0("(",
round(summary(afpc)$importance[2,1] * 100,
digits = 2),
"%)")),
y = paste("F2", paste0("(",
round(summary(afpc)$importance[2,2] * 100,
digits = 2),
"%)"))) +
theme_bw()
# Scores Fatoriais
scores_fatoriais <- t(afpc$rotation)/afpc$sdev
colnames(scores_fatoriais) <- colnames(notasfatorial_std)
scores_fatoriais
scores_fatoriais %>%
t() %>%
data.frame() %>%
rename(PC1 = 1,
PC2 = 2) %>%
select(PC1, PC2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Salvando a Matriz de CorrelaÃ§Ãµes -----------------------------------
rho <- cor(notasfatorial[,2:5])
# Observando as correlaÃ§Ãµes entre variÃ¡veis
chart.Correlation(notasfatorial[,2:5])
# Construindo um mapa de calor a partir das correlaÃ§Ãµes
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "CorrelaÃ§Ãµes") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
# Primeiro passo: salvando o mapa de calor 2D
plot3d_rho <- rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value, color = value),
color = "black") +
labs(x = NULL,
y = NULL) +
viridis::scale_fill_viridis("CorrelaÃ§Ãµes") +
theme(axis.text = element_text(size = 12),
title = element_text(size = 12,face = "bold"),
panel.border= element_rect(size = 2, color = "black", fill = NA))
# Segundo passo: visualizando o plot 3D
plot_gg(ggobj = plot3d_rho,
multicore = TRUE,
width = 6,
height = 6,
scale = 300,
background = "white",
shadowcolor = "dodgerblue4")
# A estatÃ­stica KMO -------------------------------------------------------
KMO(r = rho)
# O teste de efericidade de Bartlett --------------------------------------
cortest.bartlett(R = rho)
# De onde vÃªm os graus de liberdade?
(ncol(rho) * (ncol(rho) - 1)) / 2
# De onde vem o p-valor do teste de efericidade de Bartlett?
pchisq(q = 192.3685, df = 6, lower.tail = FALSE)
# A extraÃ§Ã£o dos eigenvalues da matriz de correlaÃ§Ãµes
eigenvalues_rho <- eigen(rho)
# Eigenvalues
eigenvalues_rho$values
polinomio_caracteristico <- charpoly(rho)
polinomio_caracteristico # resultados da esquerda para a direita, sendo o
polinomio_caracteristico_invertido <- as.polynomial(rev(polinomio_caracteristico))
solve(polinomio_caracteristico_invertido) # eigenvalues de rho
# Note que a soma dos eigenvalues Ã© igual Ã  quantidade de variÃ¡veis
# envolvidas
sum(eigenvalues_rho$values)
# Calculando a variÃ¢ncia compartilhada
var_compartilhada <- (eigenvalues_rho$values/sum(eigenvalues_rho$values))
var_compartilhada
sum(var_compartilhada) # a soma das variÃ¢ncias compartilhadas Ã© igual a 1,
# Calculando a variÃ¢ncia compartilhada cumulativa
var_cumulativa <- cumsum(var_compartilhada)
var_cumulativa
# Estabelecendo o nÃºmero mÃ¡ximo possÃ­vel de fatores
principais_componentes <- 1:sum(eigenvalues_rho$values)
principais_componentes
# Juntando tudo o que temos atÃ© o momento:
data.frame(principais_componentes = paste0("PC", principais_componentes),
eigenvalue = eigenvalues_rho$values,
var_compartilhada = var_compartilhada,
var_cumulativa = var_cumulativa) -> relatorio_eigen
# Overview dos resultados atÃ© o momento
relatorio_eigen %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# ExploraÃ§Ã£o visual do compartilhamento das variÃ¢ncias compartilhadas entre
# os componentes principais
relatorio_eigen %>%
ggplot(aes(x = principais_componentes,
y = var_compartilhada,
group = 1,
label = paste0(round(var_compartilhada * 100,
digits = 2), "%"))) +
geom_col(fill = "dodgerblue4", color = "black") +
geom_line(color = "darkgoldenrod3",
size = 1.2) +
geom_point(size = 2) +
geom_text(size = 3, vjust = 2, color = "white") +
labs(x = "Componentes Principais",
y = "VariÃ¢ncia Compartilhada") +
theme_bw()
# A determinaÃ§Ã£o dos autovetores a partir de seus respectivos eigenvalues
eigenvalues_rho$vectors
# Visualizando os pesos que cada variÃ¡vel tem em cada componente principal
# obtido pela PCA
data.frame(eigenvalues_rho$vectors) %>%
rename(PC1 = X1, PC2 = X2, PC3 = X3, PC4 = X4) %>%
mutate(var = names(notasfatorial[2:5])) %>%
melt(id.vars = "var") %>%
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw()
# Estabelecendo a matriz diagonal de eigenvalues (L2)
L2 <- diag(eigenvalues_rho$values)
L2
# Assim, com os eigenvectors calculados, podemos provar que V'.rho.V = L2
prova_01 <- t(eigenvalues_rho$vectors) %*% rho %*% eigenvalues_rho$vectors
round(x = prova_01,
digits = 14)
# Calculando os scores fatoriais
# Relembrando:
eigenvalues_rho$values
eigenvalues_rho$vectors
# EntÃ£o:
eigenvalues_rho$vectors[1,1] / sqrt(eigenvalues_rho$values[1])
eigenvalues_rho$vectors[2,1] / sqrt(eigenvalues_rho$values[1])
eigenvalues_rho$vectors[3,1] / sqrt(eigenvalues_rho$values[1])
eigenvalues_rho$vectors[4,1] / sqrt(eigenvalues_rho$values[1])
# Relembrando:
eigenvalues_rho$values
eigenvalues_rho$vectors
# EntÃ£o:
eigenvalues_rho$vectors[1,2] / sqrt(eigenvalues_rho$values[2])
eigenvalues_rho$vectors[2,2] / sqrt(eigenvalues_rho$values[2])
eigenvalues_rho$vectors[3,2] / sqrt(eigenvalues_rho$values[2])
eigenvalues_rho$vectors[4,2] / sqrt(eigenvalues_rho$values[2])
# Relembrando:
eigenvalues_rho$values
eigenvalues_rho$vectors
# EntÃ£o:
eigenvalues_rho$vectors[1,3] / sqrt(eigenvalues_rho$values[3])
eigenvalues_rho$vectors[2,3] / sqrt(eigenvalues_rho$values[3])
eigenvalues_rho$vectors[3,3] / sqrt(eigenvalues_rho$values[3])
eigenvalues_rho$vectors[4,3] / sqrt(eigenvalues_rho$values[3])
# Relembrando:
eigenvalues_rho$values
eigenvalues_rho$vectors
# EntÃ£o:
eigenvalues_rho$vectors[1,4] / sqrt(eigenvalues_rho$values[4])
eigenvalues_rho$vectors[2,4] / sqrt(eigenvalues_rho$values[4])
eigenvalues_rho$vectors[3,4] / sqrt(eigenvalues_rho$values[4])
eigenvalues_rho$vectors[4,4] / sqrt(eigenvalues_rho$values[4])
# De forma simplificada:
scores_fatoriais <- t(eigenvalues_rho$vectors)/sqrt(eigenvalues_rho$values)
scores_fatoriais
notasfatorial_std <- notasfatorial %>%
column_to_rownames("estudante") %>%
scale() %>%
data.frame()
# A seguir, vamos criar um objeto que servirÃ¡ como um receptÃ¡culo para os
# k fatores (4, no caso estudado) a serem calculados:
fatores <- list()
# Agora, utilizaremos a funÃ§Ã£o for
for(i in 1:nrow(scores_fatoriais)){
fatores[[i]] <- rowSums(x = sweep(x = notasfatorial_std,
MARGIN = 2,
STATS = scores_fatoriais[i,],
FUN = `*`))
}
# Feito isso, para fins didÃ¡ticos, vamos transformar o objeto fatores em um
# data frame para melhor visualizaÃ§Ã£o e assimiliaÃ§Ã£o de seu conteÃºdo:
fatores_df <- data.frame((sapply(X = fatores, FUN = c)))
fatores_df
fatores_df %>%
rename(F1 = X1,
F2 = X2,
F3 = X3,
F4 = X4) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Podemos verificar que os fatores calculados, de fato, sÃ£o ortogonais entre
# si, isto Ã©, possuem correlaÃ§Ãµes iguais a 0:
round(x = cor(fatores_df),
digits = 14)
# Combinando a base original 'notasfatorial' com o objeto 'fatores_df':
notasfatorial_final <-  cbind(notasfatorial,
fatores_df) %>%
rename(F1 = X1,
F2 = X2,
F3 = X3,
F4 = X4)
# Calculando as correlaÃ§Ãµes entre as variÃ¡veis e originais e os fatores
correlacoes_entre_fatores <- cor(notasfatorial_final[,2:9])
# VisualizaÃ§Ã£o grÃ¡fica das correlaÃ§Ãµes entre as variÃ¡veis e originais e os
# fatores
correlacoes_entre_fatores %>%
melt() %>%
filter(Var1 %in% c("F1","F2","F3","F4") &
Var2 %in% c("notas_financas","notas_custos",
"notas_marketing","notas_atuarias")) %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "CorrelaÃ§Ãµes") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
# RelatÃ³rio das correlaÃ§Ãµes entre as variÃ¡veis e originais e os fatores
correlacoes_entre_fatores %>%
melt() %>%
filter(Var1 %in% c("F1","F2","F3","F4") &
Var2 %in% c("notas_financas","notas_custos",
"notas_marketing","notas_atuarias")) %>%
dcast(Var1 ~ Var2) %>%
column_to_rownames("Var1") -> correlacoes_entre_fatores_df
correlacoes_entre_fatores_df %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Ã interessante notar que, se somarmos os quadrados das cargas fatoriais do
# objeto 'correlacoes_entre_fatores_df', o resultado dirÃ¡ respeito aos
# eigenvalues anteriormente calculados
correlacoes_entre_fatores_df %>%
mutate(eigenvalues = notas_financas^2 + notas_custos^2 +
notas_marketing^2 + notas_atuarias^2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
correlacoes_entre_fatores_df %>%
mutate(eigenvalues = notas_financas^2 + notas_custos^2 +
notas_marketing^2 + notas_atuarias^2) %>%
filter(eigenvalues > 1) %>%
select(-eigenvalues) %>%
t() %>%
data.frame() %>%
square() %>%
mutate(comunalidades = rowSums(.))
# Elaborando um loading plot
correlacoes_entre_fatores_df %>%
t() %>%
data.frame() %>%
rownames_to_column("variaveis") %>%
ggplot(aes(x = F1, y = F2, label = variaveis)) +
geom_point(color = "dodgerblue4",
size = 2) +
geom_text_repel() +
geom_vline(aes(xintercept = 0), linetype = "dashed", color = "red") +
geom_hline(aes(yintercept = 0), linetype = "dashed", color = "red") +
expand_limits(x= c(-1.25, 0.25), y=c(-0.25, 1)) +
labs(x = paste("DimensÃ£o 1", paste0("(",round(var_compartilhada[1] * 100,
digits = 2),"%)")),
y = paste("DimensÃ£o 2", paste0("(",round(var_compartilhada[2] * 100,
digits = 2),"%)"))) +
theme_bw()
# Fim da abordagem teÃ³rica ------------------------------------------------
# Carregando a base de dados
load("notasfatorial.RData")
# O algoritmo prcomp(), do pacote psych, EXIGE que a a matriz de dados fornecida
# a ele jÃ¡ esteja padronizada pelo procedimento zscores:
notasfatorial_std <- notasfatorial %>%
column_to_rownames("estudante") %>%
scale() %>%
data.frame()
# Rodando a PCA:
afpc <- prcomp(notasfatorial_std)
summary(afpc)
# O objeto afpc possui os seguintes componentes:
afpc$sdev
afpc$rotation
afpc$center
#Visualizando os pesos que cada variÃ¡vel tem em cada componente principal
#obtido pela PCA
data.frame(afpc$rotation) %>%
mutate(var = names(notasfatorial[2:5])) %>%
melt(id.vars = "var") %>%
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw()
# Carregando a base de dados
load("notasfatorial.RData")
# Apresentando a base de dados:
notasfatorial %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
scatter3d(notas_financas ~ notas_custos + notas_marketing,
data = notasfatorial,
surface = FALSE,
point.col = "dodgerblue4",
axis.col = rep(x = "black",
times = 3),
bg.col = "white")
# A) Notas da Disciplina de Custos x Notas da Disciplina de FinanÃ§as
notasfatorial %>%
ggplot() +
geom_point(aes(x = notas_financas, y = notas_custos),
color = "dodgerblue4",
size = 2) +
labs(x = "Notas da Disciplina de FinanÃ§as",
y = "Notas da Disciplina de Custos") +
theme_bw()
# Notaram a tendÃªncia linear? Se nÃ£o, olhem a seguir:
notasfatorial %>%
ggplot() +
geom_point(aes(x = notas_financas, y = notas_custos),
color = "dodgerblue4",
size = 2) +
geom_smooth(aes(x = notas_financas, y = notas_custos),
color = "darkgoldenrod3",
method = "lm",
formula = y ~ x,
se = FALSE,
size = 1.2) +
labs(x = "Notas da Disciplina de FinanÃ§as",
y = "Notas da Disciplina de Custos") +
theme_bw()
# B) Notas da Disciplina de Marketing x Notas da Disciplina de Custos
notasfatorial %>%
ggplot() +
geom_point(aes(x = notas_custos, y = notas_marketing),
color = "dodgerblue4",
size = 2) +
labs(x = "Notas da Disciplina de Custos",
y = "Notas da Disciplina de Marketing") +
theme_bw()
# HÃ¡ alguma tendÃªncia linear facilmente identificÃ¡vel? Vejamos:
notasfatorial %>%
ggplot() +
geom_point(aes(x = notas_custos, y = notas_marketing),
color = "dodgerblue4",
size = 2) +
geom_smooth(aes(x = notas_custos, y = notas_marketing),
color = "darkgoldenrod3",
method = "lm",
formula = y ~ x,
se = FALSE,
size = 1.2) +
labs(x = "Notas da Disciplina de Custos",
y = "Notas da Disciplina de Marketing") +
theme_bw()
# C) Notas da Disciplina de FinanÃ§as x Notas da Disciplina de Marketing
notasfatorial %>%
ggplot() +
geom_point(aes(x = notas_marketing, y = notas_financas),
color = "dodgerblue4",
size = 2) +
labs(x = "Notas da Disciplina de Marketing",
y = "Notas da Disciplina de FinanÃ§as") +
theme_bw()
# E dessa vez, vocÃª consegue visualizar alguma tendÃªncia linear?
notasfatorial %>%
ggplot() +
geom_point(aes(x = notas_marketing, y = notas_financas),
color = "dodgerblue4",
size = 2) +
geom_smooth(aes(x = notas_marketing, y = notas_financas),
color = "darkgoldenrod3",
method = "lm",
formula = y ~ x,
se = FALSE,
size = 1.2) +
labs(x = "Notas da Disciplina de Marketing",
y = "Notas da Disciplina de FinanÃ§as") +
theme_bw()
# Salvando a Matriz de CorrelaÃ§Ãµes -----------------------------------
rho <- cor(notasfatorial[,2:5])
# Observando as correlaÃ§Ãµes entre variÃ¡veis
chart.Correlation(notasfatorial[,2:5])
# Construindo um mapa de calor a partir das correlaÃ§Ãµes
rho %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "CorrelaÃ§Ãµes") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
# A estatÃ­stica KMO -------------------------------------------------------
KMO(r = rho)
# O teste de efericidade de Bartlett --------------------------------------
cortest.bartlett(R = rho)
# De onde vÃªm os graus de liberdade?
(ncol(rho) * (ncol(rho) - 1)) / 2
# De onde vem o p-valor do teste de efericidade de Bartlett?
pchisq(q = 192.3685, df = 6, lower.tail = FALSE)
# A extraÃ§Ã£o dos eigenvalues da matriz de correlaÃ§Ãµes
eigenvalues_rho <- eigen(rho)
# Eigenvalues
eigenvalues_rho$values
polinomio_caracteristico <- charpoly(rho)
polinomio_caracteristico # resultados da esquerda para a direita, sendo o
polinomio_caracteristico_invertido <- as.polynomial(rev(polinomio_caracteristico))
solve(polinomio_caracteristico_invertido) # eigenvalues de rho
# Note que a soma dos eigenvalues Ã© igual Ã  quantidade de variÃ¡veis
# envolvidas
sum(eigenvalues_rho$values)
# Calculando a variÃ¢ncia compartilhada
var_compartilhada <- (eigenvalues_rho$values/sum(eigenvalues_rho$values))
var_compartilhada
sum(var_compartilhada) # a soma das variÃ¢ncias compartilhadas Ã© igual a 1,
# Calculando a variÃ¢ncia compartilhada cumulativa
var_cumulativa <- cumsum(var_compartilhada)
var_cumulativa
