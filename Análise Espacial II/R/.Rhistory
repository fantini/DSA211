pacotes <- c("plotly","rgdal","raster","tmap","maptools","sf","rgeos","sp",
"adehabitatHR","tidyverse","broom","knitr","kableExtra","gridExtra",
"RColorBrewer","profvis","png","grid","magick","rgl","devtools",
"GISTools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# O pacote rayshader que está no CRAN, no momento, possui alguns bugs. A versão
# que está no GitHub do autor do pacote já é mais funcional. Para instalá-la:
devtools::install_github("tylermorganwall/rayshader")
# Para carregar o rayshader
library(rayshader)
# O pacote rayshader que está no CRAN, no momento, possui alguns bugs. A versão
# que está no GitHub do autor do pacote já é mais funcional. Para instalá-la:
devtools::install_github("tylermorganwall/rayshader")
# Para carregar o rayshader
library(rayshader)
pacotes <- c("tidyverse","sf","tmap","rgdal","rgeos","adehabitatHR","knitr",
"kableExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando a base de dados
load("shoppings.RData")
# Observando a classe do objeto shoppings:
class(shoppings)
# Observando as variáveis da base de dados shoppings:
shoppings %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Criando um objeto do tipo sf a partir de um data frame:
sf_shoppings <- st_as_sf(x = shoppings,
coords = c("longitude", "latitude"),
crs = 4326)
# Observando a classe do objeto sf_shoppings:
class(sf_shoppings)
# Um componente interessante do objeto sf_shoppings é chamado geometry:
sf_shoppings$geometry
# Plotando o objeto sf_shoppings de forma espacial:
tm_shape(shp = sf_shoppings) +
tm_dots(size = 1)
# Tudo no R é um objeto, ponto. Porém, já repararam que alguns outputs do R,
# a priori, parecem ‘inalcançáveis’ pelo usuário? Exemplo:
sf_shoppings$geometry
# Temos acesso a algumas informações, mas algumas coisas parecem escondidas, ou
# até inalcançáveis, propositalmente. Uma forma de extrair mais dos objetos do
# R pode ser a função atributes():
attributes(sf_shoppings$geometry)
# Posto isso, a cada vez que tenhamos o interesse de nos debruçarmos sobre
# alguns desses atributos, poderemos utilizar a função attr(), argumentando
# which:
attr(sf_shoppings$geometry, which = "crs")
attr(sf_shoppings$geometry, which = "bbox")
attr(sf_shoppings$geometry, which = "class")
# Adicionando uma camada de um mapa do Leafleet que considere a bounding box do
# objeto sf_shoppings:
tmap_mode("view")
tm_shape(shp = sf_shoppings) +
tm_dots(col = "deepskyblue4",
border.col = "black",
size = 0.2,
alpha = 0.8)
# Carregando um shapefile do município de São Paulo
shp_saopaulo <- readOGR("shapefile_municipio", "municipio_sp")
# Explorando mais profundamente o nosso shapefile do município de São Paulo:
shp_saopaulo@proj4string
# Visualização gráfica do objeto shp_saopaulo:
tm_shape(shp = shp_saopaulo) +
tm_borders()
# Combinando o objeto shp_saopaulo com o objeto sf_shoppings:
tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_shoppings) +
tm_dots(col = "regiao",
size = 0.2)
# Plotando o objeto sf_shoppings de forma espacial:
tm_shape(shp = sf_shoppings) +
tm_dots(size = 1)
# Tudo no R é um objeto, ponto. Porém, já repararam que alguns outputs do R,
# a priori, parecem ‘inalcançáveis’ pelo usuário? Exemplo:
sf_shoppings$geometry
# Temos acesso a algumas informações, mas algumas coisas parecem escondidas, ou
# até inalcançáveis, propositalmente. Uma forma de extrair mais dos objetos do
# R pode ser a função atributes():
attributes(sf_shoppings$geometry)
# Posto isso, a cada vez que tenhamos o interesse de nos debruçarmos sobre
# alguns desses atributos, poderemos utilizar a função attr(), argumentando
# which:
attr(sf_shoppings$geometry, which = "crs")
attr(sf_shoppings$geometry, which = "bbox")
attr(sf_shoppings$geometry, which = "class")
# Adicionando uma camada de um mapa do Leafleet que considere a bounding box do
# objeto sf_shoppings:
tmap_mode("view")
tm_shape(shp = sf_shoppings) +
tm_dots(col = "deepskyblue4",
border.col = "black",
size = 0.2,
alpha = 0.8)
# Carregando um shapefile do município de São Paulo
shp_saopaulo <- readOGR("shapefile_municipio", "municipio_sp")
# Explorando mais profundamente o nosso shapefile do município de São Paulo:
shp_saopaulo@proj4string
# Visualização gráfica do objeto shp_saopaulo:
tm_shape(shp = shp_saopaulo) +
tm_borders()
# Combinando o objeto shp_saopaulo com o objeto sf_shoppings:
tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_shoppings) +
tm_dots(col = "regiao",
size = 0.2)
# A aplicação da técnica de buffering pode ser feita com o uso da função
# gBuffer(), do pacote rgeos:
buffer_shoppings <- gBuffer(spgeom = sf_shoppings,
width = 1500,
byid = TRUE)
# Para tanto, primeiramente, precisaremos isolar as coordenadas de longitude e
# de latitude do data frame original shoppings:
coordenadas_shoppings <- cbind(shoppings$longitude,
shoppings$latitude)
coordenadas_shoppings
# Depois, utilizaremos a função SpatialPoints() para criar um objeto do tipo sp:
sp_shoppings <- SpatialPoints(coords = coordenadas_shoppings,
proj4string = CRS("+proj=longlat"))
# Criamos nosso primeiro objeto de classe sp! Vamos explorá-lo:
sp_shoppings@coords
sp_shoppings@bbox
sp_shoppings@proj4string@projargs
# Uma plotagem básica:
plot(sp_shoppings)
# Visualizando o resultado:
tmap_mode("plot")
tm_shape(shp = sp_shoppings) +
tm_dots(size = 1)
# Vamos tentar aplicar a função gBuffer() mais uma vez:
buffer_shoppings <- gBuffer(spgeom = sp_shoppings,
width = 1500,
byid = TRUE)
# Dessa vez, o erro foi diferente. Além de exigir um objeto de classe sp,
# a função gBuffer() exige que o objeto se oriente com distâncias euclidianas.
# Nosso atual objeto se orienta de forma geodésica.
shoppings_UTM <- spTransform(x = sp_shoppings,
CRSobj = CRS("+init=epsg:22523"))
# Visualizando o resultado:
tm_shape(shp = shoppings_UTM) +
tm_dots(size = 1)
# Agora sim, poderemos aplicar a função gBuffer():
buffer_shoppings <- gBuffer(spgeom = shoppings_UTM,
width = 1500,
byid = TRUE)
# Plotagem do objeto buffer_shoppings:
tm_shape(shp = buffer_shoppings) +
tm_borders()
tmap_mode("view")
tm_shape(shp = buffer_shoppings) +
tm_borders()
# Combinando os objetos shp_saopaulo, sf_shoppings e buffer_shoppings:
tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_shoppings) +
tm_dots(col = "regiao",
size = 0.02) +
tm_shape(buffer_shoppings) +
tm_borders(col = "black")
# Combinando os objetos shp_saopaulo, sf_shoppings e buffer_shoppings:
tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_shoppings) +
tm_dots(col = "regiao",
size = 0.02) +
tm_shape(buffer_shoppings) +
tm_borders(col = "black")
# A técnica de buffer union combina aqueles outputs da técnica de buffering que,
# por ventura, se encontrem.
buffer_union <- gUnaryUnion(spgeom = buffer_shoppings)
tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_shoppings) +
tm_dots(col = "regiao",
size = 0.02) +
tm_shape(shp = buffer_union) +
tm_borders(col = "black") +
tm_fill(col = "gray",
alpha = 0.5)
# O primeiro passo será criar um objeto sp com a base de dados atrelada a ele:
shoppings_sp_df <- SpatialPointsDataFrame(data = shoppings,
coords = coordenadas_shoppings,
proj4string = CRS("+proj=longlat"))
# Note como a função SpatialPointsDataFrame() permite a existência de um data
# frame junto a nosso objeto de classe sp:
shoppings_sp_df@data
# Para o cálculo das kernel densities, podemos utilizar a função kernelUD():
shoppings_dens <- kernelUD(xy = shoppings_sp_df,
h = "href",
grid = 1000,
boundary = NULL)
plot(shoppings_dens)
# Para estabelecer as zonas com maior densidade, propomos o seguinte:
zona1 <- getverticeshr(x = shoppings_dens, percent = 20)
zona2 <- getverticeshr(x = shoppings_dens, percent = 40)
zona3 <- getverticeshr(x = shoppings_dens, percent = 60)
zona4 <- getverticeshr(x = shoppings_dens, percent = 80)
tmap_options(check.and.fix = TRUE)
tm_shape(shp = shp_saopaulo) +
tm_fill(col = "gray90") +
tm_borders(col = "white", alpha = 0.5) +
tm_shape(shp = shoppings_sp_df) +
tm_dots(col = "regiao", size = 0.25) +
tm_shape(zona1) +
tm_borders(col = "firebrick4", lwd = 2.5) +
tm_fill(alpha = 0.4, col = "firebrick4") +
tm_shape(zona2) +
tm_borders(col = "firebrick3", lwd = 2.5) +
tm_fill(alpha = 0.3, col = "firebrick3") +
tm_shape(zona3) +
tm_borders(col = "firebrick2", lwd = 2.5) +
tm_fill(alpha = 0.2, col = "firebrick2") +
tm_shape(zona4) +
tm_borders(col = "firebrick1", lwd = 2.5) +
tm_fill(alpha = 0.1, col = "firebrick1")
tmap_mode("plot")
zona5 <- getverticeshr(x = shoppings_dens, percent = 100)
tmap_options(check.and.fix = TRUE)
tm_shape(shp = shp_saopaulo) +
tm_fill(col = "gray90") +
tm_borders(col = "white", alpha = 0.5) +
tm_shape(shp = shoppings_sp_df) +
tm_dots(col = "regiao", size = 0.25) +
tm_shape(zona1) +
tm_borders(col = "firebrick4", lwd = 2.5) +
tm_fill(alpha = 0.4, col = "firebrick4") +
tm_shape(zona2) +
tm_borders(col = "firebrick3", lwd = 2.5) +
tm_fill(alpha = 0.3, col = "firebrick3") +
tm_shape(zona3) +
tm_borders(col = "firebrick2", lwd = 2.5) +
tm_fill(alpha = 0.2, col = "firebrick2") +
tm_shape(zona4) +
tm_borders(col = "firebrick1", lwd = 2.5) +
tm_fill(alpha = 0.1, col = "firebrick1")
# Para estabelecer as zonas com maior densidade, propomos o seguinte:
zona1 <- getverticeshr(x = shoppings_dens, percent = 20)
zona2 <- getverticeshr(x = shoppings_dens, percent = 40)
zona3 <- getverticeshr(x = shoppings_dens, percent = 60)
zona4 <- getverticeshr(x = shoppings_dens, percent = 80)
tmap_options(check.and.fix = TRUE)
tm_shape(shp = shp_saopaulo) +
tm_fill(col = "gray90") +
tm_borders(col = "white", alpha = 0.5) +
tm_shape(shp = shoppings_sp_df) +
tm_dots(col = "regiao", size = 0.25) +
tm_shape(zona1) +
tm_borders(col = "firebrick4", lwd = 2.5) +
tm_fill(alpha = 0.4, col = "firebrick4") +
tm_shape(zona2) +
tm_borders(col = "firebrick3", lwd = 2.5) +
tm_fill(alpha = 0.3, col = "firebrick3") +
tm_shape(zona3) +
tm_borders(col = "firebrick2", lwd = 2.5) +
tm_fill(alpha = 0.2, col = "firebrick2") +
tm_shape(zona4) +
tm_borders(col = "firebrick1", lwd = 2.5) +
tm_fill(alpha = 0.1, col = "firebrick1")
pacotes <- c("tidyverse","raster","tmap","rgdal","rayshader","profvis")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando nosso objeto raster:
relevo_sp <- raster("raster_sp/relevo_sp.tif")
# Observando a classe do objeto relevo_sp:
class(relevo_sp)
# Explorando o objeto relevo_sp:
relevo_sp
# Plotando o objeto relevo_sp de forma espacial:
plot.new() #Limpando a aba Plots
plot(relevo_sp)
# Podemos estabelecer um histograma a respeito das altitudes do objeto relevo_sp
hist(relevo_sp,
main = "",
xlab = "Altitudes das Formações Geográficas",
ylab = "Frequência",
col = "deepskyblue4",
maxpixels = 2160000)
pacotes <- c("rgdal","plotly","tidyverse","knitr","kableExtra","gridExtra",
"png","grid","magick","rgl","devtools","GISTools","rayshader",
"tmap","broom")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando um shapefile da Região Centro-Oeste brasileira
shp_centro_oeste <- readOGR(dsn = "shapefile_centrooeste",
layer = "centrooeste_shapefile")
# Explorando a base de dados do shapefile shp_centro_oeste:
shp_centro_oeste@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Notaram os erros de enconding? Para corrigi-los, uma opção pode ser recarregar
# o shapefile com um tipo de encoding que suporte os caracteres utilizados:
shp_centro_oeste <- readOGR(dsn = "shapefile_centrooeste",
layer = "centrooeste_shapefile",
encoding = "UTF8")
# Explorando a base de dados do shapefile shp_centro_oeste recarregado:
shp_centro_oeste@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Visualizando o shapefile de forma espacial:
tm_shape(shp = shp_centro_oeste) +
tm_borders()
# Para quem não sabe onde fica a Região Centro-Oeste brasileira:
tmap_mode("view")
tm_shape(shp = shp_centro_oeste) +
tm_borders()
tmap_mode("plot")
# Caso a intenção seja a de identificar cada município envolvido na plotagem, a
# função tm_text() pode ser uma solução, caso não haja muitos polígonos
# envolvidos
tm_shape(shp = shp_centro_oeste) +
tm_borders() +
tm_text(text = "NM_MUNICIP", size = 0.4)
