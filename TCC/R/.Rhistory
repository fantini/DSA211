prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
#criando arvore
arvore <- rpart(
curso ~ multa + codsexo + ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = 0)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$curso)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
#criando arvore
arvore <- rpart(
curso ~ multa + codsexo + ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = -1)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$curso)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
#criando arvore
arvore <- rpart(
curso ~ multa + codsexo + ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = -2)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$curso)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
#criando arvore
arvore <- rpart(
curso ~ multa + codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = -2)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$curso)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = -2)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0.01)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0.001)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$curso)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0.0001)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0.001)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0.002)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0.0005)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0.0006)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + idade + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = 0.0008)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$curso)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
#criando arvore
arvore <- rpart(
multa ~ ear,
data = teste,
method = 'class',
control = rpart.control(cp = 0.0008)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ ear,
data = teste,
method = 'class',
control = rpart.control(cp = -1)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$curso)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
prob = predict(arvore, teste)
class = prob[,2]>.3
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
prob = predict(arvore, teste)
class = prob[,2]>.6
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
summary(condutores$multa)
condutores$multa_f <- factor(condutores$multa)
summary(condutores$multa)
summary(condutores$multa_f)
#criando arvore
arvore <- rpart(
multa ~ ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = -1)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = 0.001)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = 0.0001)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
rpart.plot::rpart.plot(arvore)
prob = predict(arvore, teste)
class = prob[,2]>.6
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
#criando arvore
arvore <- rpart(
multa ~ ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = 0.0001, maxdepth = 3)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = 0.0001, maxdepth = 4)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = 0.00001, maxdepth = 4)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ ear + idade,
data = teste,
method = 'class',
control = rpart.control(cp = -1, maxdepth = 4)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo,
data = teste,
method = 'class',
control = rpart.control(cp = -1, maxdepth = 4)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear,
data = teste,
method = 'class',
control = rpart.control(cp = -1, maxdepth = 4)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear . categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = -1, maxdepth = 4)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear . categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = -1, maxdepth = 5)
)
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = -1, maxdepth = 4)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
summary(teste$categoriavigente)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = -1, maxdepth = 3)
)
arvore$terms
rpart.plot::rpart.plot(arvore)
#visualizando arvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(arvore, box.palette = paleta)
prob = predict(arvore, teste)
class = prob[,2]>.5
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
prob = predict(arvore, teste)
class = prob[,2]>.49
tab <- table(class, teste$multa)
tab
class = prob[,2]>.48
tab <- table(class, teste$multa)
tab
class = prob[,2]>.47
tab <- table(class, teste$multa)
tab
prob = predict(arvore, teste)
class = prob[,2]>=.48
tab <- table(class, teste$multa)
tab
prob = predict(arvore, teste)
class = prob[,2]>=.479
tab <- table(class, teste$multa)
tab
prob = predict(arvore, teste)
class = prob[,2]>.47
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
#criando arvore
arvore <- rpart(
multa ~ codsexo + ear + categoriavigente,
data = teste,
method = 'class',
control = rpart.control(cp = -1, maxdepth = 4)
)
arvore$terms
#visualizando arvore
paleta = scales::viridis_pal(begin=.75, end=1)(20)
rpart.plot::rpart.plot(arvore, box.palette = paleta)
prob = predict(arvore, teste)
class = prob[,2]>.52
tab <- table(class, teste$multa)
tab
prob = predict(arvore, teste)
class = prob[,2]>.51
tab <- table(class, teste$multa)
tab
acc <- (tab[1,1] + tab[2,2])/ sum(tab)
acc
summary(teste$multa)
1374/(3321+1374)
1+12+27+22+10+2
+25
0+1+12+0+26+2+20+2+2+8+1+1
+25
1+12+27+22+10+2
+25
#carregando condutores
condutores <- read_csv("condutores-20220216.csv")
set.seed(2360873)
bool_treino <- stats::runif(dim(condutores)[1])>.001
treino <- condutores[bool_treino,]
teste <- condutores[!bool_treino,]
head(treino)
teste$codsexo = factor(teste$codsexo)
teste$ear = factor(teste$ear)
teste$multa = factor(teste$multa)
teste$curso = factor(teste$curso)
teste$categoriavigente = factor(teste$categoriavigente)
teste %>% str
controle <- caret::trainControl(
"cv",
number = 10,
summaryFunction = twoClassSummary, # Função de avaliação de performance
classProbs = TRUE # Necessário para calcular a curva ROC
)
modelo <- caret::train(
curso ~ multa + codsexo + ear + categoriavigente,
data = teste,
method = "xgbTree",
trControl = controle,
tuneGrid = NULL,
verbosity = 0)
modelo <- caret::train(
curso ~ multa + codsexo + ear,
data = teste,
method = "xgbTree",
trControl = controle,
tuneGrid = NULL,
verbosity = 0)
modelo <- caret::train(
curso ~ codsexo + ear,
data = teste,
method = "xgbTree",
trControl = controle,
tuneGrid = NULL,
verbosity = 0)
modelo <- caret::train(
multa ~ codsexo + ear,
data = teste,
method = "xgbTree",
trControl = controle,
tuneGrid = NULL,
verbosity = 0)
levels(teste$multa)
levels(teste$multa) <- c("N", "S")
levels(teste$multa)
levels(teste$curso)
levels(teste$curso) <- c("N", "S")
levels(teste$codsexo)
levels(teste$codsexo) <- c("M", "F")
levels(teste$ear)
levels(teste$ear) <- C("N", "S")
levels(teste$ear) <- c("N", "S")
levels(teste$ear)
modelo <- caret::train(
multa ~ codsexo + ear,
data = teste,
method = "xgbTree",
trControl = controle,
tuneGrid = NULL,
verbosity = 0)
modelo
avalia <- function(modelo, nome_modelo="modelo"){
p_treino <- predict(modelo, treino, type='prob') # Probabilidade predita
c_treino <- predict(modelo, treino)              # Classifica��o
#Base de teste
p_teste <- predict(modelo, teste, type='prob')
c_teste <- predict(modelo, teste)
# Data frame de avalia��o (Treino)
aval_treino <- data.frame(obs=treino$Survived,
pred=c_treino,
Y = p_treino[,2],
N = 1-p_treino[,2]
)
# Data frame de avalia��o (Teste)
aval_teste <- data.frame(obs=teste$Survived,
pred=c_teste,
Y = p_teste[,2],
N = 1-p_teste[,2]
)
tcs_treino <- caret::twoClassSummary(aval_treino,
lev=levels(aval_treino$obs))
tcs_teste <- caret::twoClassSummary(aval_teste,
lev=levels(aval_teste$obs))
##########################
# Curva ROC              #
CurvaROC <- ggplot2::ggplot(aval_teste, aes(d = obs, m = Y, colour='1')) +
plotROC::geom_roc(n.cuts = 0, color="blue") +
plotROC::geom_roc(data=aval_treino,
aes(d = obs, m = Y, colour='1'),
n.cuts = 0, color = "red") +
scale_color_viridis_d(direction = -1, begin=0, end=.25) +
theme(legend.position = "none") +
ggtitle(paste("Curva ROC | ", nome_modelo, " | AUC-treino=",
percent(tcs_treino[1]),
"| AUC_teste = ",
percent(tcs_teste[1]))
)
print('Avalia��o base de treino')
print(tcs_treino)
print('Avalia��o base de teste')
print(tcs_teste)
CurvaROC
}
avalia(modelo, nome_modelo="XGBoosting")
