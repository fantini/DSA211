pacotes <- c("rgdal","raster","tmap","maptools","sf","rgeos","sp","adehabitatHR",
"tidyverse","broom","rayshader","knitr","kableExtra","RColorBrewer",
"profvis")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
pacotes <- c("rgdal","raster","tmap","maptools","tidyverse","broom","knitr",
"kableExtra","RColorBrewer")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando um shapefile -------------------------------------------------
shp_sp <- readOGR(dsn = "shapefile_sp", layer = "estado_sp")
# Características básicas do objeto shp_sp
summary(shp_sp)
# Classe e tipo do objeto carregado
class(shp_sp)
typeof(shp_sp)
typeof(shp_sp)
# Para acessar a base de dados de um shapefile, devemos utilizar o operador @:
shp_sp@data
shp_sp@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Para acessar as variáveis da base de dados atrelada ao shapefile, utilizaremos
# o operador $:
shp_sp$NM_MUNICIP
shp_sp$CD_GEOCMU
# Para acessar os outros componentes do shapefile, utilizaremos o operador @:
shp_sp@polygons #Posições geográficas dos polígonos
shp_sp@plotOrder #Ordem de plotagem dos polígonos
shp_sp@bbox #Eixo X (Longitude Oeste e Leste; Latitude Norte e Sul)
shp_sp@proj4string@projargs #Sistema de projeção geográfica do shapefile
# Plotagem básica de um shapefile -----------------------------------------
plot(shp_sp)
# Vamos supor que haja a necessidade do cálculo das áreas dos municípios
# paulistas. Podemos fazer isso com a função area():
area(shp_sp)
# Vamos supor que haja a necessidade do cálculo das áreas dos municípios
# paulistas. Podemos fazer isso com a função area():
area(shp_sp)
# Vamos supor que haja a necessidade do cálculo das áreas dos municípios
# paulistas. Podemos fazer isso com a função area():
raster::area(shp_sp)
raster::area(shp_sp) / 1000000
shp_sp@data["area_aproximada"] <- raster::area(shp_sp) / 1000000
shp_sp@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Carregando uma base de dados real a respeito dos municípios de SP:
load("dados_sp.RData")
# Observando a base de dados carregada
dados_sp %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Para combinar os dados do objeto dados_sp com a base de dados de nosso
# shapefile, podemos utilizar a função merge():
shp_dados_sp <- merge(x = shp_sp,
y = dados_sp,
by.x = "CD_GEOCMU",
by.y = "codigo")
shp_dados_sp@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Salvando nosso shapefile:
writeOGR(obj = shp_dados_sp,
layer = "nosso_novo_shapefile",
driver = "ESRI Shapefile",
dsn = "mbadsa")
# Caso a intenção fosse a plotagem dos dados do dataset presente no objeto
# shp_dados_sp, a lógica seria a mesma já aprendida no curso:
shp_dados_sp@data %>%
ggplot() +
geom_histogram(aes(x = idh),
fill = "deepskyblue4",
color = "white") +
labs(x = "IDH",
y = "Frequência") +
theme_bw()
# Passo 1: Transformar o shapefile num objeto do tipo data frame e, depois,
# importar os dados que já estavam no shapefile para o novo objeto data frame.
shp_dados_df <- tidy(shp_dados_sp, region = "CD_GEOCMU") %>%
rename(CD_GEOCMU = id) %>%
left_join(shp_dados_sp@data,
by = "CD_GEOCMU")
#Passo 2: A plotagem.
shp_dados_df %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group, fill = idh),
color = "black") +
labs(x = "Longitude",
y = "Latitude",
color = "IDH") +
scale_fill_viridis_c() +
theme_bw()
#Passo 2: A plotagem.
shp_dados_df %>%
ggplot() +
geom_polygon(aes(x = long, y = lat, group = group, fill = idh),
color = "black") +
labs(x = "Longitude",
y = "Latitude",
fill = "IDH") +
scale_fill_viridis_c() +
theme_bw()
# Utilizando a tmap: ------------------------------------------------------
tm_shape(shp = shp_dados_sp) +
tm_fill(col = "idh", palette = "Blues")
# Como saber quais paletas de cores podem ser utilizadas? -----------------
display.brewer.all()
# Vamos reconstruir o último mapa, utilizando uma nova paleta de cor e propondo
# 4 variações de cores:
tm_shape(shp = shp_dados_sp) +
tm_fill(col = "idh",
style = "quantile",
n = 4,
palette = "Greens")
# Adicionando um histograma ao mapa anterior
tm_shape(shp = shp_dados_sp) +
tm_fill(col = "idh",
style = "quantile",
n = 4,
palette = "Greens",
legend.hist = TRUE)
# Reposicionando o histograma
tm_shape(shp = shp_dados_sp) +
tm_fill(col = "idh",
style = "quantile",
n = 4,
palette = "Greens",
legend.hist = TRUE) +
tm_layout(legend.outside = TRUE)
# Posicionando manualmente o histograma, e adicionando um título
tm_shape(shp = shp_dados_sp) +
tm_fill(col = "idh",
style = "quantile",
n = 4,
palette = "BuPu",
legend.hist = TRUE) +
tm_layout(legend.text.size = 0.7,
legend.title.size = 0.9,
legend.hist.size = 0.5,
legend.hist.height = 0.2,
legend.hist.width = 0.3,
frame = FALSE,
main.title = "A Distribuição do IDH nos Municípios de SP")
# Adicionando uma bússola e bordas aos polígonos
tm_shape(shp = shp_dados_sp) +
tm_fill(col = "idh",
style = "quantile",
n = 4,
palette = "Reds",
legend.hist = TRUE) +
tm_layout(legend.text.size = 0.7,
legend.title.size = 0.9,
legend.hist.size = 0.5,
legend.hist.height = 0.2,
legend.hist.width = 0.3,
frame = F,
main.title = "A Distribuição do IDH nos Municípios de SP") +
tm_borders(alpha = 0.8) +
tm_compass(type = "8star",
show.labels = 3)
# Carregando um novo shapefile:
shp_mundo <- readOGR(dsn = "shapefile_mundo", layer = "mundo")
# Visualizando o shapefile shp_mundo:
tm_shape(shp = shp_mundo) +
tm_borders()
# Observando as variáveis da base de dados do objeto shp_mundo:
shp_mundo@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Carregando um novo shapefile:
shp_mundo <- readOGR(dsn = "shapefile_mundo", layer = "mundo")
# Visualizando o shapefile shp_mundo:
tm_shape(shp = shp_mundo) +
tm_borders()
# Observando as variáveis da base de dados do objeto shp_mundo:
shp_mundo@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Dessa forma:
shp_amsul <- shp_mundo[shp_mundo@data$contnnt == "South America", ]
# Plotando o  objeto shp_amsul:
tm_shape(shp = shp_amsul) +
tm_borders()
# Carregando shapefiles a serem combinados
shp_argentina <- readOGR(dsn = "shapefile_mercosul", layer = "argentina_shapefile")
shp_brasil <- readOGR(dsn = "shapefile_mercosul", layer = "brasil_shapefile")
shp_paraguai <- readOGR(dsn = "shapefile_mercosul", layer = "paraguai_shapefile")
shp_venezuela <- readOGR(dsn = "shapefile_mercosul", layer = "venezuela_shapefile")
# A combinação pode ser feita com a função bind(), do pacote raster
shp_mercosul <- bind(shp_argentina,
shp_brasil,
shp_paraguai,
shp_venezuela)
# Observando a base de dados do objeto shp_mercosul:
shp_mercosul@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Visualizando o shapefile criado shp_mercosul:
tm_shape(shp = shp_mercosul) +
tm_borders(lwd = 1) +
tm_fill(col = "mercosul") +
tm_layout(legend.width = 0.8)
pacotes <- c("tidyverse","sf","tmap","rgdal","rgeos","adehabitatHR","knitr",
"kableExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
pacotes <- c("tidyverse","sf","tmap","rgdal","rgeos","adehabitatHR","knitr",
"kableExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando a base de dados
load("shoppings.RData")
# Observando a classe do objeto shoppings:
class(shoppings)
# Observando as variáveis da base de dados shoppings:
shoppings %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
# Criando um objeto do tipo sf a partir de um data frame:
sf_shoppings <- st_as_sf(x = shoppings,
coords = c("longitude", "latitude"),
crs = 4326)
# Observando a classe do objeto sf_shoppings:
class(sf_shoppings)
# Um componente interessante do objeto sf_shoppings é chamado geometry:
sf_shoppings$geometry
# Plotando o objeto sf_shoppings de forma espacial:
tm_shape(shp = sf_shoppings) +
tm_dots(size = 1)
# Adicionando uma camada de um mapa do Leafleet que considere a bounding box do
# objeto sf_shoppings:
tmap_mode("view")
tm_shape(shp = sf_shoppings) +
tm_dots(col = "deepskyblue4",
border.col = "black",
size = 0.2,
alpha = 0.8)
# Carregando um shapefile do município de São Paulo
shp_saopaulo <- readOGR("shapefile_municipio", "municipio_sp")
# Visualização gráfica do objeto shp_saopaulo:
tm_shape(shp = shp_saopaulo) +
tm_borders()
# Combinando o objeto shp_saopaulo com o objeto sf_shoppings:
tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_shoppings) +
tm_dots(col = "regiao",
size = 0.02)
# Combinando o objeto shp_saopaulo com o objeto sf_shoppings:
tm_shape(shp = shp_saopaulo) +
tm_borders(alpha = 0.5) +
tm_shape(shp = sf_shoppings) +
tm_dots(col = "regiao",
size = 0.2)
